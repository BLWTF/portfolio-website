/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./node_modules/@rive-app/canvas/rive.js":
/*!***********************************************!*\
  !*** ./node_modules/@rive-app/canvas/rive.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ([\n/* 0 */,\n/* 1 */\n/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_545__) => {\n\n__nested_webpack_require_545__.r(__webpack_exports__);\n/* harmony export */ __nested_webpack_require_545__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\nvar Rive = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  \n  return (\nfunction(Rive) {\n  Rive = Rive || {};\n\n\nvar m;m||(m=typeof Rive !== 'undefined' ? Rive : {});var aa,ba;m.ready=new Promise(function(b,a){aa=b;ba=a});\nfunction ca(){function b(h){const g=d;c=a=0;d=new Map;g.forEach(l=>{try{l(h)}catch(k){console.error(k)}});this.La();e&&e.fb()}let a=0,c=0,d=new Map,e=null,f=null;this.requestAnimationFrame=function(h){a||(a=requestAnimationFrame(b.bind(this)));const g=++c;d.set(g,h);return g};this.cancelAnimationFrame=function(h){d.delete(h);a&&0==d.size&&(cancelAnimationFrame(a),a=0)};this.cb=function(h){f&&(document.body.remove(f),f=null);h||(f=document.createElement(\"div\"),f.style.backgroundColor=\"black\",f.style.position=\n\"fixed\",f.style.right=0,f.style.top=0,f.style.color=\"white\",f.style.padding=\"4px\",f.innerHTML=\"RIVE FPS\",h=function(g){f.innerHTML=\"RIVE FPS \"+g.toFixed(1)},document.body.appendChild(f));e=new function(){let g=0,l=0;this.fb=function(){var k=performance.now();l?(++g,k-=l,1E3<k&&(h(1E3*g/k),g=l=0)):(l=k,g=0)}}};this.$a=function(){f&&(document.body.remove(f),f=null);e=null};this.La=function(){}}\nfunction ea(b){console.assert(!0);const a=new Map;let c=-Infinity;this.push=function(d){d=d+((1<<b)-1)>>b;a.has(d)&&clearTimeout(a.get(d));a.set(d,setTimeout(function(){a.delete(d);0==a.length?c=-Infinity:d==c&&(c=Math.max(...a.keys()),console.assert(c<d))},1E3));c=Math.max(d,c);return c<<b}}\nconst fa=new function(){function b(){if(!a){var t=document.createElement(\"canvas\"),v={alpha:1,depth:0,stencil:0,antialias:0,premultipliedAlpha:1,preserveDrawingBuffer:0,preferLowPowerToHighPerformance:0,failIfMajorPerformanceCaveat:0,enableExtensionsByDefault:1,explicitSwapControl:1,renderViaOffscreenBackBuffer:1};let q=t.getContext(\"webgl2\",v);if(q)c=2;else if(q=t.getContext(\"webgl\",v))c=1;else return console.log(\"No WebGL support. Image mesh will not be drawn.\"),!1;d=Math.min(q.getParameter(q.MAX_RENDERBUFFER_SIZE),\nq.getParameter(q.MAX_TEXTURE_SIZE));function F(I,w,z){w=q.createShader(w);q.shaderSource(w,z);q.compileShader(w);z=q.getShaderInfoLog(w);if(0<z.length)throw z;q.attachShader(I,w)}t=q.createProgram();F(t,q.VERTEX_SHADER,\"attribute vec2 vertex;\\n                attribute vec2 uv;\\n                uniform vec4 mat;\\n                uniform vec2 translate;\\n                varying vec2 st;\\n                void main() {\\n                    st = uv;\\n                    gl_Position = vec4(mat2(mat) * vertex + translate, 0, 1);\\n                }\");\nF(t,q.FRAGMENT_SHADER,\"precision highp float;\\n                uniform sampler2D image;\\n                varying vec2 st;\\n                void main() {\\n                    gl_FragColor = texture2D(image, st);\\n                }\");q.bindAttribLocation(t,0,\"vertex\");q.bindAttribLocation(t,1,\"uv\");q.linkProgram(t);v=q.getProgramInfoLog(t);if(0<v.trim().length)throw v;e=q.getUniformLocation(t,\"mat\");f=q.getUniformLocation(t,\"translate\");q.useProgram(t);q.bindBuffer(q.ARRAY_BUFFER,q.createBuffer());\nq.enableVertexAttribArray(0);q.enableVertexAttribArray(1);q.bindBuffer(q.ELEMENT_ARRAY_BUFFER,q.createBuffer());q.uniform1i(q.getUniformLocation(t,\"image\"),0);q.pixelStorei(q.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!0);a=q}return!0}let a=null,c=0,d=0,e=null,f=null,h=0,g=0;this.ob=function(){b();return d};this.Ya=function(t){if(!b())return null;const v=a.createTexture();a.bindTexture(a.TEXTURE_2D,v);a.texImage2D(a.TEXTURE_2D,0,a.RGBA,a.RGBA,a.UNSIGNED_BYTE,t);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE);\na.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.LINEAR);2==c?(a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR_MIPMAP_LINEAR),a.generateMipmap(a.TEXTURE_2D)):a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR);return v};const l=new ea(8),k=new ea(8),p=new ea(10),r=new ea(10);this.bb=function(t,v,q,F,I){if(b()){var w=l.push(t),z=k.push(v);if(a.canvas.width!=w||a.canvas.height!=z)a.canvas.width=w,a.canvas.height=z;\na.viewport(0,z-v,t,v);a.disable(a.SCISSOR_TEST);a.clearColor(0,0,0,0);a.clear(a.COLOR_BUFFER_BIT);a.enable(a.SCISSOR_TEST);q.sort((y,da)=>da.Oa-y.Oa);w=p.push(F);h!=w&&(a.bufferData(a.ARRAY_BUFFER,8*w,a.DYNAMIC_DRAW),h=w);w=0;for(var J of q)a.bufferSubData(a.ARRAY_BUFFER,w,J.Aa),w+=4*J.Aa.length;console.assert(w==4*F);for(var P of q)a.bufferSubData(a.ARRAY_BUFFER,w,P.Ra),w+=4*P.Ra.length;console.assert(w==8*F);w=r.push(I);g!=w&&(a.bufferData(a.ELEMENT_ARRAY_BUFFER,2*w,a.DYNAMIC_DRAW),g=w);J=0;for(var X of q)a.bufferSubData(a.ELEMENT_ARRAY_BUFFER,\nJ,X.indices),J+=2*X.indices.length;console.assert(J==2*I);X=0;P=!0;w=J=0;for(const y of q){y.image.va!=X&&(a.bindTexture(a.TEXTURE_2D,y.image.Va||null),X=y.image.va);y.rb?(a.scissor(y.Ea,z-y.Fa-y.Ka,y.yb,y.Ka),P=!0):P&&(a.scissor(0,z-v,t,v),P=!1);q=2/t;const da=-2/v;a.uniform4f(e,y.la[0]*q*y.ra,y.la[1]*da*y.sa,y.la[2]*q*y.ra,y.la[3]*da*y.sa);a.uniform2f(f,y.la[4]*q*y.ra+q*(y.Ea-y.pb*y.ra)-1,y.la[5]*da*y.sa+da*(y.Fa-y.qb*y.sa)+1);a.vertexAttribPointer(0,2,a.FLOAT,!1,0,w);a.vertexAttribPointer(1,2,\na.FLOAT,!1,0,w+4*F);a.drawElements(a.TRIANGLES,y.indices.length,a.UNSIGNED_SHORT,J);w+=4*y.Aa.length;J+=2*y.indices.length}console.assert(w==4*F);console.assert(J==2*I)}};this.canvas=function(){return b()&&a.canvas}};\nRive.onRuntimeInitialized=function(){function b(n){switch(n){case k.srcOver:return\"source-over\";case k.screen:return\"screen\";case k.overlay:return\"overlay\";case k.darken:return\"darken\";case k.lighten:return\"lighten\";case k.colorDodge:return\"color-dodge\";case k.colorBurn:return\"color-burn\";case k.hardLight:return\"hard-light\";case k.softLight:return\"soft-light\";case k.difference:return\"difference\";case k.exclusion:return\"exclusion\";case k.multiply:return\"multiply\";case k.hue:return\"hue\";case k.saturation:return\"saturation\";\ncase k.color:return\"color\";case k.luminosity:return\"luminosity\"}}function a(n){return\"rgba(\"+((16711680&n)>>>16)+\",\"+((65280&n)>>>8)+\",\"+((255&n)>>>0)+\",\"+((4278190080&n)>>>24)/255+\")\"}function c(){0<J.length&&(fa.bb(z.drawWidth(),z.drawHeight(),J,P,X),J=[],X=P=0,z.reset(512,512));for(const n of w){for(const u of n.ba)u();n.ba=[]}w.clear()}var d=Rive.RenderPaintStyle;const e=Rive.RenderPath,f=Rive.RenderPaint,h=Rive.Renderer,g=Rive.StrokeCap,l=Rive.StrokeJoin,k=Rive.BlendMode,p=d.fill,r=d.stroke,\nt=Rive.FillRule.evenOdd;let v=1;var q=Rive.RenderImage.extend(\"CanvasRenderImage\",{__construct:function(){this.__parent.__construct.call(this);this.va=v;v=v+1&2147483647||1},decode:function(n){let u=Xa;u.total++;var D=this,B=new Image;B.src=URL.createObjectURL(new Blob([n],{type:\"image/png\"}));B.onload=function(){D.Ta=B;D.Va=fa.Ya(B);D.size(B.width,B.height);u.loaded++;if(u.loaded===u.total){const E=u.ready;E&&(E(),u.ready=null)}}}}),F=e.extend(\"CanvasRenderPath\",{__construct:function(){this.__parent.__construct.call(this);\nthis.ga=new Path2D},rewind:function(){this.ga=new Path2D},addPath:function(n,u,D,B,E,G,A){var C=this.ga,R=C.addPath;n=n.ga;const K=new DOMMatrix;K.a=u;K.b=D;K.c=B;K.d=E;K.e=G;K.f=A;R.call(C,n,K)},fillRule:function(n){this.Ca=n},moveTo:function(n,u){this.ga.moveTo(n,u)},lineTo:function(n,u){this.ga.lineTo(n,u)},cubicTo:function(n,u,D,B,E,G){this.ga.bezierCurveTo(n,u,D,B,E,G)},close:function(){this.ga.closePath()}}),I=f.extend(\"CanvasRenderPaint\",{color:function(n){this.Da=a(n)},thickness:function(n){this.Wa=\nn},join:function(n){switch(n){case l.miter:this.ua=\"miter\";break;case l.round:this.ua=\"round\";break;case l.bevel:this.ua=\"bevel\"}},cap:function(n){switch(n){case g.butt:this.ta=\"butt\";break;case g.round:this.ta=\"round\";break;case g.square:this.ta=\"square\"}},style:function(n){this.Ua=n},blendMode:function(n){this.Sa=b(n)},linearGradient:function(n,u,D,B){this.oa={Pa:n,Qa:u,Ha:D,Ia:B,za:[]}},radialGradient:function(n,u,D,B){this.oa={Pa:n,Qa:u,Ha:D,Ia:B,za:[],mb:!0}},addStop:function(n,u){this.oa.za.push({color:n,\nstop:u})},completeGradient:function(){},draw:function(n,u,D){let B=this.Ua;var E=this.Da,G=this.oa;n.globalCompositeOperation=this.Sa;if(null!=G){E=G.Pa;var A=G.Qa;const R=G.Ha;var C=G.Ia;const K=G.za;G.mb?(G=R-E,C-=A,E=n.createRadialGradient(E,A,0,E,A,Math.sqrt(G*G+C*C))):E=n.createLinearGradient(E,A,R,C);for(let U=0,L=K.length;U<L;U++)A=K[U],E.addColorStop(A.stop,a(A.color));this.Da=E;this.oa=null}switch(B){case r:n.strokeStyle=E;n.lineWidth=this.Wa;n.lineCap=this.ta;n.lineJoin=this.ua;n.stroke(u);\nbreak;case p:n.fillStyle=E,n.fill(u,D)}}});const w=new Set;let z=null,J=[],P=0,X=0;var y=Rive.CanvasRenderer=h.extend(\"Renderer\",{__construct:function(n){this.__parent.__construct.call(this);this.fa=[1,0,0,1,0,0];this.Z=n.getContext(\"2d\");this.Ba=n;this.ba=[]},save:function(){this.fa.push(...this.fa.slice(this.fa.length-6));this.ba.push(this.Z.save.bind(this.Z))},restore:function(){const n=this.fa.length-6;if(6>n)throw\"restore() called without matching save().\";this.fa.splice(n);this.ba.push(this.Z.restore.bind(this.Z))},\ntransform:function(n,u,D,B,E,G){const A=this.fa,C=A.length-6;A.splice(C,6,A[C]*n+A[C+2]*u,A[C+1]*n+A[C+3]*u,A[C]*D+A[C+2]*B,A[C+1]*D+A[C+3]*B,A[C]*E+A[C+2]*G+A[C+4],A[C+1]*E+A[C+3]*G+A[C+5]);this.ba.push(this.Z.transform.bind(this.Z,n,u,D,B,E,G))},rotate:function(n){const u=Math.sin(n);n=Math.cos(n);this.transform(n,u,-u,n,0,0)},_drawPath:function(n,u){this.ba.push(u.draw.bind(u,this.Z,n.ga,n.Ca===t?\"evenodd\":\"nonzero\"))},drawImage:function(n,...u){var D=this.Z;this.ba.push(function(){D.drawImage(n,\n...u)})},_drawRiveImage:function(n,u,D){var B=n.Ta;if(B){var E=this.Z,G=b(u);this.ba.push(function(){E.globalCompositeOperation=G;E.globalAlpha=D;E.drawImage(B,0,0);E.globalAlpha=1})}},_getMatrix:function(n){const u=this.fa,D=u.length-6;for(let B=0;6>B;++B)n[B]=u[D+B]},_drawImageMesh:function(n,u,D,B,E,G,A,C,R,K){var U=this.Z.canvas.width,L=this.Z.canvas.height;const pb=R-A,qb=K-C;A=Math.max(A,0);C=Math.max(C,0);R=Math.min(R,U);K=Math.min(K,L);const sa=R-A,ta=K-C;console.assert(sa<=Math.min(pb,U));\nconsole.assert(ta<=Math.min(qb,L));if(!(0>=sa||0>=ta)){R=sa<pb||ta<qb;U=K=1;var ia=Math.ceil(sa*K),ja=Math.ceil(ta*U);L=fa.ob();ia>L&&(K*=L/ia,ia=L);ja>L&&(U*=L/ja,ja=L);z||(z=new m.DynamicRectanizer(L),z.reset(512,512));L=z.addRect(ia,ja);0>L&&(c(),w.add(this),L=z.addRect(ia,ja),console.assert(0<=L));var rb=L&65535,sb=L>>16;J.push({la:this.fa.slice(this.fa.length-6),image:n,Ea:rb,Fa:sb,pb:A,qb:C,yb:ia,Ka:ja,ra:K,sa:U,Aa:new Float32Array(B),Ra:new Float32Array(E),indices:new Uint16Array(G),rb:R,Oa:n.va<<\n1|(R?1:0)});P+=B.length;X+=G.length;var na=this.Z,Yb=b(u);this.ba.push(function(){na.save();na.resetTransform();na.globalCompositeOperation=Yb;na.globalAlpha=D;na.drawImage(fa.canvas(),rb,sb,ia,ja,A,C,sa,ta);na.restore()})}},_clipPath:function(n){this.ba.push(this.Z.clip.bind(this.Z,n.ga,n.Ca===t?\"evenodd\":\"nonzero\"))},clear:function(){w.add(this);this.ba.push(this.Z.clearRect.bind(this.Z,0,0,this.Ba.width,this.Ba.height))},flush:function(){},translate:function(n,u){this.transform(1,0,0,1,n,u)}});\nRive.makeRenderer=function(n){return new y(n)};Rive.renderFactory={makeRenderPaint:function(){return new I},makeRenderPath:function(){return new F},makeRenderImage:function(){return new q}};let da=Rive.load,Xa=null;Rive.load=function(n){return new Promise(function(u){let D=null;Xa={total:0,loaded:0,ready:function(){u(D)}};D=da(n);0==Xa.total&&u(D)})};d=new ca;Rive.requestAnimationFrame=d.requestAnimationFrame.bind(d);Rive.cancelAnimationFrame=d.cancelAnimationFrame.bind(d);Rive.enableFPSCounter=d.cb.bind(d);\nRive.disableFPSCounter=d.$a;d.La=c;Rive.cleanup=function(){z&&z.delete()}};var ha=Object.assign({},m),ka=\"object\"==typeof window,la=\"function\"==typeof importScripts,x=\"\",ma,oa;\nif(ka||la)la?x=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(x=document.currentScript.src),_scriptDir&&(x=_scriptDir),0!==x.indexOf(\"blob:\")?x=x.substr(0,x.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):x=\"\",la&&(oa=b=>{var a=new XMLHttpRequest;a.open(\"GET\",b,!1);a.responseType=\"arraybuffer\";a.send(null);return new Uint8Array(a.response)}),ma=(b,a,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",b,!0);d.responseType=\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?\na(d.response):c()};d.onerror=c;d.send(null)};var pa=m.print||console.log.bind(console),qa=m.printErr||console.warn.bind(console);Object.assign(m,ha);ha=null;var ra;m.wasmBinary&&(ra=m.wasmBinary);var noExitRuntime=m.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ua(\"no native wasm support detected\");var va,wa=!1,xa=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction ya(b,a,c){var d=a+c;for(c=a;b[c]&&!(c>=d);)++c;if(16<c-a&&b.buffer&&xa)return xa.decode(b.subarray(a,c));for(d=\"\";a<c;){var e=b[a++];if(e&128){var f=b[a++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|f);else{var h=b[a++]&63;e=224==(e&240)?(e&15)<<12|f<<6|h:(e&7)<<18|f<<12|h<<6|b[a++]&63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}return d}var za,Aa,H,Ba,Ca,Da,M,Ea,Fa;\nfunction Ga(){var b=va.buffer;za=b;m.HEAP8=Aa=new Int8Array(b);m.HEAP16=Ba=new Int16Array(b);m.HEAP32=Da=new Int32Array(b);m.HEAPU8=H=new Uint8Array(b);m.HEAPU16=Ca=new Uint16Array(b);m.HEAPU32=M=new Uint32Array(b);m.HEAPF32=Ea=new Float32Array(b);m.HEAPF64=Fa=new Float64Array(b)}var Ha,Ia=[],Ja=[],Ka=[];function La(){var b=m.preRun.shift();Ia.unshift(b)}var Ma=0,Na=null,Oa=null;\nfunction ua(b){if(m.onAbort)m.onAbort(b);b=\"Aborted(\"+b+\")\";qa(b);wa=!0;b=new WebAssembly.RuntimeError(b+\". Build with -sASSERTIONS for more info.\");ba(b);throw b;}function Pa(){return N.startsWith(\"data:application/octet-stream;base64,\")}var N;N=\"canvas_advanced.wasm\";if(!Pa()){var Qa=N;N=m.locateFile?m.locateFile(Qa,x):x+Qa}function Ra(){var b=N;try{if(b==N&&ra)return new Uint8Array(ra);if(oa)return oa(b);throw\"both async and sync fetching of the wasm failed\";}catch(a){ua(a)}}\nfunction Sa(){if(!ra&&(ka||la)){if(\"function\"==typeof fetch&&!N.startsWith(\"file://\"))return fetch(N,{credentials:\"same-origin\"}).then(function(b){if(!b.ok)throw\"failed to load wasm binary file at '\"+N+\"'\";return b.arrayBuffer()}).catch(function(){return Ra()});if(ma)return new Promise(function(b,a){ma(N,function(c){b(new Uint8Array(c))},a)})}return Promise.resolve().then(function(){return Ra()})}function Ta(b){for(;0<b.length;)b.shift()(m)}\nfunction Ua(b){if(void 0===b)return\"_unknown\";b=b.replace(/[^a-zA-Z0-9_]/g,\"$\");var a=b.charCodeAt(0);return 48<=a&&57>=a?\"_\"+b:b}function Va(b,a){b=Ua(b);return function(){return a.apply(this,arguments)}}var O=[{},{value:void 0},{value:null},{value:!0},{value:!1}],Wa=[];\nfunction Ya(b){var a=Error,c=Va(b,function(d){this.name=b;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(a.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}var Za=void 0;function Q(b){throw new Za(b);}\nvar $a=b=>{b||Q(\"Cannot use deleted val. handle = \"+b);return O[b].value},S=b=>{switch(b){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var a=Wa.length?Wa.pop():O.length;O[a]={ya:1,value:b};return a}},ab=void 0,bb=void 0;function T(b){for(var a=\"\";H[b];)a+=bb[H[b++]];return a}var cb=[];function db(){for(;cb.length;){var b=cb.pop();b.U.ka=!1;b[\"delete\"]()}}var eb=void 0,V={};\nfunction fb(b,a){for(void 0===a&&Q(\"ptr should not be undefined\");b.$;)a=b.na(a),b=b.$;return a}var gb={};function hb(b){b=ib(b);var a=T(b);jb(b);return a}function kb(b,a){var c=gb[b];void 0===c&&Q(a+\" has unknown type \"+hb(b));return c}function lb(){}var mb=!1;function nb(b){--b.count.value;0===b.count.value&&(b.aa?b.da.ha(b.aa):b.X.V.ha(b.W))}function ob(b,a,c){if(a===c)return b;if(void 0===c.$)return null;b=ob(b,a,c.$);return null===b?null:c.ab(b)}var tb={};\nfunction ub(b,a){a=fb(b,a);return V[a]}var vb=void 0;function wb(b){throw new vb(b);}function xb(b,a){a.X&&a.W||wb(\"makeClassHandle requires ptr and ptrType\");!!a.da!==!!a.aa&&wb(\"Both smartPtrType and smartPtr must be specified\");a.count={value:1};return yb(Object.create(b,{U:{value:a}}))}\nfunction yb(b){if(\"undefined\"===typeof FinalizationRegistry)return yb=a=>a,b;mb=new FinalizationRegistry(a=>{nb(a.U)});yb=a=>{var c=a.U;c.aa&&mb.register(a,{U:c},a);return a};lb=a=>{mb.unregister(a)};return yb(b)}var zb={};function Ab(b){for(;b.length;){var a=b.pop();b.pop()(a)}}function Bb(b){return this.fromWireType(Da[b>>2])}var Cb={},Db={};\nfunction W(b,a,c){function d(g){g=c(g);g.length!==b.length&&wb(\"Mismatched type converter count\");for(var l=0;l<b.length;++l)Y(b[l],g[l])}b.forEach(function(g){Db[g]=a});var e=Array(a.length),f=[],h=0;a.forEach((g,l)=>{gb.hasOwnProperty(g)?e[l]=gb[g]:(f.push(g),Cb.hasOwnProperty(g)||(Cb[g]=[]),Cb[g].push(()=>{e[l]=gb[g];++h;h===f.length&&d(e)}))});0===f.length&&d(e)}\nfunction Eb(b){switch(b){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+b);}}\nfunction Y(b,a,c={}){if(!(\"argPackAdvance\"in a))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=a.name;b||Q('type \"'+d+'\" must have a positive integer typeid pointer');if(gb.hasOwnProperty(b)){if(c.lb)return;Q(\"Cannot register type '\"+d+\"' twice\")}gb[b]=a;delete Db[b];Cb.hasOwnProperty(b)&&(a=Cb[b],delete Cb[b],a.forEach(e=>e()))}function Fb(b){Q(b.U.X.V.name+\" instance already deleted\")}function Gb(){}\nfunction Hb(b,a,c){if(void 0===b[a].Y){var d=b[a];b[a]=function(){b[a].Y.hasOwnProperty(arguments.length)||Q(\"Function '\"+c+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+b[a].Y+\")!\");return b[a].Y[arguments.length].apply(this,arguments)};b[a].Y=[];b[a].Y[d.ja]=d}}\nfunction Ib(b,a,c){m.hasOwnProperty(b)?((void 0===c||void 0!==m[b].Y&&void 0!==m[b].Y[c])&&Q(\"Cannot register public name '\"+b+\"' twice\"),Hb(m,b,b),m.hasOwnProperty(c)&&Q(\"Cannot register multiple overloads of a function with the same number of arguments (\"+c+\")!\"),m[b].Y[c]=a):(m[b]=a,void 0!==c&&(m[b].zb=c))}function Jb(b,a,c,d,e,f,h,g){this.name=b;this.constructor=a;this.ea=c;this.ha=d;this.$=e;this.gb=f;this.na=h;this.ab=g;this.Ma=[]}\nfunction Kb(b,a,c){for(;a!==c;)a.na||Q(\"Expected null or instance of \"+c.name+\", got an instance of \"+a.name),b=a.na(b),a=a.$;return b}function Lb(b,a){if(null===a)return this.wa&&Q(\"null is not a valid \"+this.name),0;a.U||Q('Cannot pass \"'+Mb(a)+'\" as a '+this.name);a.U.W||Q(\"Cannot pass deleted object as a pointer of type \"+this.name);return Kb(a.U.W,a.U.X.V,this.V)}\nfunction Nb(b,a){if(null===a){this.wa&&Q(\"null is not a valid \"+this.name);if(this.qa){var c=this.xa();null!==b&&b.push(this.ha,c);return c}return 0}a.U||Q('Cannot pass \"'+Mb(a)+'\" as a '+this.name);a.U.W||Q(\"Cannot pass deleted object as a pointer of type \"+this.name);!this.pa&&a.U.X.pa&&Q(\"Cannot convert argument of type \"+(a.U.da?a.U.da.name:a.U.X.name)+\" to parameter type \"+this.name);c=Kb(a.U.W,a.U.X.V,this.V);if(this.qa)switch(void 0===a.U.aa&&Q(\"Passing raw pointer to smart pointer is illegal\"),\nthis.xb){case 0:a.U.da===this?c=a.U.aa:Q(\"Cannot convert argument of type \"+(a.U.da?a.U.da.name:a.U.X.name)+\" to parameter type \"+this.name);break;case 1:c=a.U.aa;break;case 2:if(a.U.da===this)c=a.U.aa;else{var d=a.clone();c=this.tb(c,S(function(){d[\"delete\"]()}));null!==b&&b.push(this.ha,c)}break;default:Q(\"Unsupporting sharing policy\")}return c}\nfunction Ob(b,a){if(null===a)return this.wa&&Q(\"null is not a valid \"+this.name),0;a.U||Q('Cannot pass \"'+Mb(a)+'\" as a '+this.name);a.U.W||Q(\"Cannot pass deleted object as a pointer of type \"+this.name);a.U.X.pa&&Q(\"Cannot convert argument of type \"+a.U.X.name+\" to parameter type \"+this.name);return Kb(a.U.W,a.U.X.V,this.V)}\nfunction Pb(b,a,c,d){this.name=b;this.V=a;this.wa=c;this.pa=d;this.qa=!1;this.ha=this.tb=this.xa=this.Na=this.xb=this.sb=void 0;void 0!==a.$?this.toWireType=Nb:(this.toWireType=d?Lb:Ob,this.ca=null)}function Qb(b,a,c){m.hasOwnProperty(b)||wb(\"Replacing nonexistant public symbol\");void 0!==m[b].Y&&void 0!==c?m[b].Y[c]=a:(m[b]=a,m[b].ja=c)}\nfunction Rb(b,a){var c=[];return function(){c.length=0;Object.assign(c,arguments);if(b.includes(\"j\")){var d=m[\"dynCall_\"+b];d=c&&c.length?d.apply(null,[a].concat(c)):d.call(null,a)}else d=Ha.get(a).apply(null,c);return d}}function Z(b,a){b=T(b);var c=b.includes(\"j\")?Rb(b,a):Ha.get(a);\"function\"!=typeof c&&Q(\"unknown function pointer with signature \"+b+\": \"+a);return c}var Sb=void 0;\nfunction Tb(b,a){function c(f){e[f]||gb[f]||(Db[f]?Db[f].forEach(c):(d.push(f),e[f]=!0))}var d=[],e={};a.forEach(c);throw new Sb(b+\": \"+d.map(hb).join([\", \"]));}\nfunction Ub(b,a,c,d,e){var f=a.length;2>f&&Q(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");var h=null!==a[1]&&null!==c,g=!1;for(c=1;c<a.length;++c)if(null!==a[c]&&void 0===a[c].ca){g=!0;break}var l=\"void\"!==a[0].name,k=f-2,p=Array(k),r=[],t=[];return function(){arguments.length!==k&&Q(\"function \"+b+\" called with \"+arguments.length+\" arguments, expected \"+k+\" args!\");t.length=0;r.length=h?2:1;r[0]=e;if(h){var v=a[1].toWireType(t,this);r[1]=v}for(var q=0;q<k;++q)p[q]=\na[q+2].toWireType(t,arguments[q]),r.push(p[q]);q=d.apply(null,r);if(g)Ab(t);else for(var F=h?1:2;F<a.length;F++){var I=1===F?v:p[F-2];null!==a[F].ca&&a[F].ca(I)}v=l?a[0].fromWireType(q):void 0;return v}}function Vb(b,a){for(var c=[],d=0;d<b;d++)c.push(M[a+4*d>>2]);return c}\nfunction Wb(b,a,c){b instanceof Object||Q(c+' with invalid \"this\": '+b);b instanceof a.V.constructor||Q(c+' incompatible with \"this\" of type '+b.constructor.name);b.U.W||Q(\"cannot call emscripten binding method \"+c+\" on deleted object\");return Kb(b.U.W,b.U.X.V,a.V)}function Xb(b){4<b&&0===--O[b].ya&&(O[b]=void 0,Wa.push(b))}\nfunction Zb(b,a,c){switch(a){case 0:return function(d){return this.fromWireType((c?Aa:H)[d])};case 1:return function(d){return this.fromWireType((c?Ba:Ca)[d>>1])};case 2:return function(d){return this.fromWireType((c?Da:M)[d>>2])};default:throw new TypeError(\"Unknown integer type: \"+b);}}function Mb(b){if(null===b)return\"null\";var a=typeof b;return\"object\"===a||\"array\"===a||\"function\"===a?b.toString():\"\"+b}\nfunction $b(b,a){switch(a){case 2:return function(c){return this.fromWireType(Ea[c>>2])};case 3:return function(c){return this.fromWireType(Fa[c>>3])};default:throw new TypeError(\"Unknown float type: \"+b);}}\nfunction ac(b,a,c){switch(a){case 0:return c?function(d){return Aa[d]}:function(d){return H[d]};case 1:return c?function(d){return Ba[d>>1]}:function(d){return Ca[d>>1]};case 2:return c?function(d){return Da[d>>2]}:function(d){return M[d>>2]};default:throw new TypeError(\"Unknown integer type: \"+b);}}var bc=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;\nfunction cc(b,a){var c=b>>1;for(var d=c+a/2;!(c>=d)&&Ca[c];)++c;c<<=1;if(32<c-b&&bc)return bc.decode(H.subarray(b,c));c=\"\";for(d=0;!(d>=a/2);++d){var e=Ba[b+2*d>>1];if(0==e)break;c+=String.fromCharCode(e)}return c}function dc(b,a,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=a;c=c<2*b.length?c/2:b.length;for(var e=0;e<c;++e)Ba[a>>1]=b.charCodeAt(e),a+=2;Ba[a>>1]=0;return a-d}function ec(b){return 2*b.length}\nfunction fc(b,a){for(var c=0,d=\"\";!(c>=a/4);){var e=Da[b+4*c>>2];if(0==e)break;++c;65536<=e?(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023)):d+=String.fromCharCode(e)}return d}function gc(b,a,c){void 0===c&&(c=2147483647);if(4>c)return 0;var d=a;c=d+c-4;for(var e=0;e<b.length;++e){var f=b.charCodeAt(e);if(55296<=f&&57343>=f){var h=b.charCodeAt(++e);f=65536+((f&1023)<<10)|h&1023}Da[a>>2]=f;a+=4;if(a+4>c)break}Da[a>>2]=0;return a-d}\nfunction hc(b){for(var a=0,c=0;c<b.length;++c){var d=b.charCodeAt(c);55296<=d&&57343>=d&&++c;a+=4}return a}var ic={};function jc(b){var a=ic[b];return void 0===a?T(b):a}var kc=[];function lc(b){var a=kc.length;kc.push(b);return a}function mc(b,a){for(var c=Array(b),d=0;d<b;++d)c[d]=kb(M[a+4*d>>2],\"parameter \"+d);return c}var nc=[],oc=[null,[],[]];Za=m.BindingError=Ya(\"BindingError\");m.count_emval_handles=function(){for(var b=0,a=5;a<O.length;++a)void 0!==O[a]&&++b;return b};\nm.get_first_emval=function(){for(var b=5;b<O.length;++b)if(void 0!==O[b])return O[b];return null};ab=m.PureVirtualError=Ya(\"PureVirtualError\");for(var pc=Array(256),qc=0;256>qc;++qc)pc[qc]=String.fromCharCode(qc);bb=pc;m.getInheritedInstanceCount=function(){return Object.keys(V).length};m.getLiveInheritedInstances=function(){var b=[],a;for(a in V)V.hasOwnProperty(a)&&b.push(V[a]);return b};m.flushPendingDeletes=db;m.setDelayFunction=function(b){eb=b;cb.length&&eb&&eb(db)};vb=m.InternalError=Ya(\"InternalError\");\nGb.prototype.isAliasOf=function(b){if(!(this instanceof Gb&&b instanceof Gb))return!1;var a=this.U.X.V,c=this.U.W,d=b.U.X.V;for(b=b.U.W;a.$;)c=a.na(c),a=a.$;for(;d.$;)b=d.na(b),d=d.$;return a===d&&c===b};Gb.prototype.clone=function(){this.U.W||Fb(this);if(this.U.ma)return this.U.count.value+=1,this;var b=yb,a=Object,c=a.create,d=Object.getPrototypeOf(this),e=this.U;b=b(c.call(a,d,{U:{value:{count:e.count,ka:e.ka,ma:e.ma,W:e.W,X:e.X,aa:e.aa,da:e.da}}}));b.U.count.value+=1;b.U.ka=!1;return b};\nGb.prototype[\"delete\"]=function(){this.U.W||Fb(this);this.U.ka&&!this.U.ma&&Q(\"Object already scheduled for deletion\");lb(this);nb(this.U);this.U.ma||(this.U.aa=void 0,this.U.W=void 0)};Gb.prototype.isDeleted=function(){return!this.U.W};Gb.prototype.deleteLater=function(){this.U.W||Fb(this);this.U.ka&&!this.U.ma&&Q(\"Object already scheduled for deletion\");cb.push(this);1===cb.length&&eb&&eb(db);this.U.ka=!0;return this};Pb.prototype.hb=function(b){this.Na&&(b=this.Na(b));return b};\nPb.prototype.Ga=function(b){this.ha&&this.ha(b)};Pb.prototype.argPackAdvance=8;Pb.prototype.readValueFromPointer=Bb;Pb.prototype.deleteObject=function(b){if(null!==b)b[\"delete\"]()};\nPb.prototype.fromWireType=function(b){function a(){return this.qa?xb(this.V.ea,{X:this.sb,W:c,da:this,aa:b}):xb(this.V.ea,{X:this,W:b})}var c=this.hb(b);if(!c)return this.Ga(b),null;var d=ub(this.V,c);if(void 0!==d){if(0===d.U.count.value)return d.U.W=c,d.U.aa=b,d.clone();d=d.clone();this.Ga(b);return d}d=this.V.gb(c);d=tb[d];if(!d)return a.call(this);d=this.pa?d.Xa:d.pointerType;var e=ob(c,this.V,d.V);return null===e?a.call(this):this.qa?xb(d.V.ea,{X:d,W:e,da:this,aa:b}):xb(d.V.ea,{X:d,W:e})};\nSb=m.UnboundTypeError=Ya(\"UnboundTypeError\");\nvar sc={G:function(b,a,c){b=T(b);a=kb(a,\"wrapper\");c=$a(c);var d=[].slice,e=a.V,f=e.ea,h=e.$.ea,g=e.$.constructor;b=Va(b,function(){e.$.Ma.forEach(function(k){if(this[k]===h[k])throw new ab(\"Pure virtual function \"+k+\" must be implemented in JavaScript\");}.bind(this));Object.defineProperty(this,\"__parent\",{value:f});this.__construct.apply(this,d.call(arguments))});f.__construct=function(){this===f&&Q(\"Pass correct 'this' to __construct\");var k=g.implement.apply(void 0,[this].concat(d.call(arguments)));\nlb(k);var p=k.U;k.notifyOnDestruction();p.ma=!0;Object.defineProperties(this,{U:{value:p}});yb(this);k=p.W;k=fb(e,k);V.hasOwnProperty(k)?Q(\"Tried to register registered instance: \"+k):V[k]=this};f.__destruct=function(){this===f&&Q(\"Pass correct 'this' to __destruct\");lb(this);var k=this.U.W;k=fb(e,k);V.hasOwnProperty(k)?delete V[k]:Q(\"Tried to unregister unregistered instance: \"+k)};b.prototype=Object.create(f);for(var l in c)b.prototype[l]=c[l];return S(b)},J:function(b){var a=zb[b];delete zb[b];\nvar c=a.xa,d=a.ha,e=a.Ja,f=e.map(h=>h.kb).concat(e.map(h=>h.vb));W([b],f,h=>{var g={};e.forEach((l,k)=>{var p=h[k],r=l.ib,t=l.jb,v=h[k+e.length],q=l.ub,F=l.wb;g[l.eb]={read:I=>p.fromWireType(r(t,I)),write:(I,w)=>{var z=[];q(F,I,v.toWireType(z,w));Ab(z)}}});return[{name:a.name,fromWireType:function(l){var k={},p;for(p in g)k[p]=g[p].read(l);d(l);return k},toWireType:function(l,k){for(var p in g)if(!(p in k))throw new TypeError('Missing field:  \"'+p+'\"');var r=c();for(p in g)g[p].write(r,k[p]);null!==\nl&&l.push(d,r);return r},argPackAdvance:8,readValueFromPointer:Bb,ca:d}]})},z:function(){},E:function(b,a,c,d,e){var f=Eb(c);a=T(a);Y(b,{name:a,fromWireType:function(h){return!!h},toWireType:function(h,g){return g?d:e},argPackAdvance:8,readValueFromPointer:function(h){if(1===c)var g=Aa;else if(2===c)g=Ba;else if(4===c)g=Da;else throw new TypeError(\"Unknown boolean type size: \"+a);return this.fromWireType(g[h>>f])},ca:null})},e:function(b,a,c,d,e,f,h,g,l,k,p,r,t){p=T(p);f=Z(e,f);g&&(g=Z(h,g));k&&(k=\nZ(l,k));t=Z(r,t);var v=Ua(p);Ib(v,function(){Tb(\"Cannot construct \"+p+\" due to unbound types\",[d])});W([b,a,c],d?[d]:[],function(q){q=q[0];if(d){var F=q.V;var I=F.ea}else I=Gb.prototype;q=Va(v,function(){if(Object.getPrototypeOf(this)!==w)throw new Za(\"Use 'new' to construct \"+p);if(void 0===z.ia)throw new Za(p+\" has no accessible constructor\");var P=z.ia[arguments.length];if(void 0===P)throw new Za(\"Tried to invoke ctor of \"+p+\" with invalid number of parameters (\"+arguments.length+\") - expected (\"+\nObject.keys(z.ia).toString()+\") parameters instead!\");return P.apply(this,arguments)});var w=Object.create(I,{constructor:{value:q}});q.prototype=w;var z=new Jb(p,q,w,t,F,f,g,k);F=new Pb(p,z,!0,!1);I=new Pb(p+\"*\",z,!1,!1);var J=new Pb(p+\" const*\",z,!1,!0);tb[b]={pointerType:I,Xa:J};Qb(v,q);return[F,I,J]})},k:function(b,a,c,d,e,f,h){var g=Vb(c,d);a=T(a);f=Z(e,f);W([],[b],function(l){function k(){Tb(\"Cannot call \"+p+\" due to unbound types\",g)}l=l[0];var p=l.name+\".\"+a;a.startsWith(\"@@\")&&(a=Symbol[a.substring(2)]);\nvar r=l.V.constructor;void 0===r[a]?(k.ja=c-1,r[a]=k):(Hb(r,a,p),r[a].Y[c-1]=k);W([],g,function(t){t=Ub(p,[t[0],null].concat(t.slice(1)),null,f,h);void 0===r[a].Y?(t.ja=c-1,r[a]=t):r[a].Y[c-1]=t;return[]});return[]})},s:function(b,a,c,d,e,f,h,g){a=T(a);f=Z(e,f);W([],[b],function(l){l=l[0];var k=l.name+\".\"+a,p={get:function(){Tb(\"Cannot access \"+k+\" due to unbound types\",[c])},enumerable:!0,configurable:!0};p.set=g?()=>{Tb(\"Cannot access \"+k+\" due to unbound types\",[c])}:()=>{Q(k+\" is a read-only property\")};\nObject.defineProperty(l.V.constructor,a,p);W([],[c],function(r){r=r[0];var t={get:function(){return r.fromWireType(f(d))},enumerable:!0};g&&(g=Z(h,g),t.set=v=>{var q=[];g(d,r.toWireType(q,v));Ab(q)});Object.defineProperty(l.V.constructor,a,t);return[]});return[]})},o:function(b,a,c,d,e,f){0<a||ua();var h=Vb(a,c);e=Z(d,e);W([],[b],function(g){g=g[0];var l=\"constructor \"+g.name;void 0===g.V.ia&&(g.V.ia=[]);if(void 0!==g.V.ia[a-1])throw new Za(\"Cannot register multiple constructors with identical number of parameters (\"+\n(a-1)+\") for class '\"+g.name+\"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");g.V.ia[a-1]=()=>{Tb(\"Cannot construct \"+g.name+\" due to unbound types\",h)};W([],h,function(k){k.splice(1,0,null);g.V.ia[a-1]=Ub(l,k,null,e,f);return[]});return[]})},a:function(b,a,c,d,e,f,h,g){var l=Vb(c,d);a=T(a);f=Z(e,f);W([],[b],function(k){function p(){Tb(\"Cannot call \"+r+\" due to unbound types\",l)}k=k[0];var r=k.name+\".\"+a;a.startsWith(\"@@\")&&(a=Symbol[a.substring(2)]);\ng&&k.V.Ma.push(a);var t=k.V.ea,v=t[a];void 0===v||void 0===v.Y&&v.className!==k.name&&v.ja===c-2?(p.ja=c-2,p.className=k.name,t[a]=p):(Hb(t,a,r),t[a].Y[c-2]=p);W([],l,function(q){q=Ub(r,q,k,f,h);void 0===t[a].Y?(q.ja=c-2,t[a]=q):t[a].Y[c-2]=q;return[]});return[]})},d:function(b,a,c,d,e,f,h,g,l,k){a=T(a);e=Z(d,e);W([],[b],function(p){p=p[0];var r=p.name+\".\"+a,t={get:function(){Tb(\"Cannot access \"+r+\" due to unbound types\",[c,h])},enumerable:!0,configurable:!0};t.set=l?()=>{Tb(\"Cannot access \"+r+\" due to unbound types\",\n[c,h])}:()=>{Q(r+\" is a read-only property\")};Object.defineProperty(p.V.ea,a,t);W([],l?[c,h]:[c],function(v){var q=v[0],F={get:function(){var w=Wb(this,p,r+\" getter\");return q.fromWireType(e(f,w))},enumerable:!0};if(l){l=Z(g,l);var I=v[1];F.set=function(w){var z=Wb(this,p,r+\" setter\"),J=[];l(k,z,I.toWireType(J,w));Ab(J)}}Object.defineProperty(p.V.ea,a,F);return[]});return[]})},D:function(b,a){a=T(a);Y(b,{name:a,fromWireType:function(c){var d=$a(c);Xb(c);return d},toWireType:function(c,d){return S(d)},\nargPackAdvance:8,readValueFromPointer:Bb,ca:null})},l:function(b,a,c,d){function e(){}c=Eb(c);a=T(a);e.values={};Y(b,{name:a,constructor:e,fromWireType:function(f){return this.constructor.values[f]},toWireType:function(f,h){return h.value},argPackAdvance:8,readValueFromPointer:Zb(a,c,d),ca:null});Ib(a,e)},c:function(b,a,c){var d=kb(b,\"enum\");a=T(a);b=d.constructor;d=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:Va(d.name+\"_\"+a,function(){})}});b.values[c]=d;b[a]=d},u:function(b,\na,c){c=Eb(c);a=T(a);Y(b,{name:a,fromWireType:function(d){return d},toWireType:function(d,e){return e},argPackAdvance:8,readValueFromPointer:$b(a,c),ca:null})},q:function(b,a,c,d,e,f){var h=Vb(a,c);b=T(b);e=Z(d,e);Ib(b,function(){Tb(\"Cannot call \"+b+\" due to unbound types\",h)},a-1);W([],h,function(g){Qb(b,Ub(b,[g[0],null].concat(g.slice(1)),null,e,f),a-1);return[]})},j:function(b,a,c,d,e){a=T(a);-1===e&&(e=4294967295);e=Eb(c);var f=g=>g;if(0===d){var h=32-8*c;f=g=>g<<h>>>h}c=a.includes(\"unsigned\")?\nfunction(g,l){return l>>>0}:function(g,l){return l};Y(b,{name:a,fromWireType:f,toWireType:c,argPackAdvance:8,readValueFromPointer:ac(a,e,0!==d),ca:null})},g:function(b,a,c){function d(f){f>>=2;var h=M;return new e(za,h[f+1],h[f])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][a];c=T(c);Y(b,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{lb:!0})},v:function(b,a){a=T(a);var c=\"std::string\"===a;Y(b,{name:a,fromWireType:function(d){var e=\nM[d>>2],f=d+4;if(c)for(var h=f,g=0;g<=e;++g){var l=f+g;if(g==e||0==H[l]){h=h?ya(H,h,l-h):\"\";if(void 0===k)var k=h;else k+=String.fromCharCode(0),k+=h;h=l+1}}else{k=Array(e);for(g=0;g<e;++g)k[g]=String.fromCharCode(H[f+g]);k=k.join(\"\")}jb(d);return k},toWireType:function(d,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var f,h=\"string\"==typeof e;h||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||Q(\"Cannot pass non-string to std::string\");if(c&&h){var g=0;for(f=\n0;f<e.length;++f){var l=e.charCodeAt(f);127>=l?g++:2047>=l?g+=2:55296<=l&&57343>=l?(g+=4,++f):g+=3}f=g}else f=e.length;g=rc(4+f+1);l=g+4;M[g>>2]=f;if(c&&h){if(h=l,l=f+1,f=H,0<l){l=h+l-1;for(var k=0;k<e.length;++k){var p=e.charCodeAt(k);if(55296<=p&&57343>=p){var r=e.charCodeAt(++k);p=65536+((p&1023)<<10)|r&1023}if(127>=p){if(h>=l)break;f[h++]=p}else{if(2047>=p){if(h+1>=l)break;f[h++]=192|p>>6}else{if(65535>=p){if(h+2>=l)break;f[h++]=224|p>>12}else{if(h+3>=l)break;f[h++]=240|p>>18;f[h++]=128|p>>12&\n63}f[h++]=128|p>>6&63}f[h++]=128|p&63}}f[h]=0}}else if(h)for(h=0;h<f;++h)k=e.charCodeAt(h),255<k&&(jb(l),Q(\"String has UTF-16 code units that do not fit in 8 bits\")),H[l+h]=k;else for(h=0;h<f;++h)H[l+h]=e[h];null!==d&&d.push(jb,g);return g},argPackAdvance:8,readValueFromPointer:Bb,ca:function(d){jb(d)}})},t:function(b,a,c){c=T(c);if(2===a){var d=cc;var e=dc;var f=ec;var h=()=>Ca;var g=1}else 4===a&&(d=fc,e=gc,f=hc,h=()=>M,g=2);Y(b,{name:c,fromWireType:function(l){for(var k=M[l>>2],p=h(),r,t=l+4,v=\n0;v<=k;++v){var q=l+4+v*a;if(v==k||0==p[q>>g])t=d(t,q-t),void 0===r?r=t:(r+=String.fromCharCode(0),r+=t),t=q+a}jb(l);return r},toWireType:function(l,k){\"string\"!=typeof k&&Q(\"Cannot pass non-string to C++ string type \"+c);var p=f(k),r=rc(4+p+a);M[r>>2]=p>>g;e(k,r+4,p+a);null!==l&&l.push(jb,r);return r},argPackAdvance:8,readValueFromPointer:Bb,ca:function(l){jb(l)}})},L:function(b,a,c,d,e,f){zb[b]={name:T(a),xa:Z(c,d),ha:Z(e,f),Ja:[]}},K:function(b,a,c,d,e,f,h,g,l,k){zb[b].Ja.push({eb:T(a),kb:c,ib:Z(d,\ne),jb:f,vb:h,ub:Z(g,l),wb:k})},F:function(b,a){a=T(a);Y(b,{nb:!0,name:a,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},r:function(b,a,c){b=$a(b);a=kb(a,\"emval::as\");var d=[],e=S(d);M[c>>2]=e;return a.toWireType(d,b)},w:function(b,a,c,d,e){b=kc[b];a=$a(a);c=jc(c);var f=[];M[d>>2]=S(f);return b(a,c,f,e)},i:function(b,a,c,d){b=kc[b];a=$a(a);c=jc(c);b(a,c,null,d)},f:Xb,h:function(b,a){var c=mc(b,a),d=c[0];a=d.name+\"_$\"+c.slice(1).map(function(h){return h.name}).join(\"_\")+\"$\";var e=\nnc[a];if(void 0!==e)return e;var f=Array(b-1);e=lc((h,g,l,k)=>{for(var p=0,r=0;r<b-1;++r)f[r]=c[r+1].readValueFromPointer(k+p),p+=c[r+1].argPackAdvance;h=h[g].apply(h,f);for(r=0;r<b-1;++r)c[r+1].Za&&c[r+1].Za(f[r]);if(!d.nb)return d.toWireType(l,h)});return nc[a]=e},p:function(b){b=jc(b);return S(m[b])},I:function(b,a){b=$a(b);a=$a(a);return S(b[a])},m:function(b){4<b&&(O[b].ya+=1)},H:function(b){return S(jc(b))},n:function(b){var a=$a(b);Ab(a);Xb(b)},x:function(b,a){b=kb(b,\"_emval_take_value\");b=\nb.readValueFromPointer(a);return S(b)},b:function(){ua(\"\")},A:function(b){var a=H.length;b>>>=0;if(2147483648<b)return!1;for(var c=1;4>=c;c*=2){var d=a*(1+.2/c);d=Math.min(d,b+100663296);var e=Math;d=Math.max(b,d);e=e.min.call(e,2147483648,d+(65536-d%65536)%65536);a:{try{va.grow(e-za.byteLength+65535>>>16);Ga();var f=1;break a}catch(h){}f=void 0}if(f)return!0}return!1},C:function(){return 52},y:function(){return 70},B:function(b,a,c,d){for(var e=0,f=0;f<c;f++){var h=M[a>>2],g=M[a+4>>2];a+=8;for(var l=\n0;l<g;l++){var k=H[h+l],p=oc[b];0===k||10===k?((1===b?pa:qa)(ya(p,0)),p.length=0):p.push(k)}e+=g}M[d>>2]=e;return 0}};\n(function(){function b(e){m.asm=e.exports;va=m.asm.M;Ga();Ha=m.asm.S;Ja.unshift(m.asm.N);Ma--;m.monitorRunDependencies&&m.monitorRunDependencies(Ma);0==Ma&&(null!==Na&&(clearInterval(Na),Na=null),Oa&&(e=Oa,Oa=null,e()))}function a(e){b(e.instance)}function c(e){return Sa().then(function(f){return WebAssembly.instantiate(f,d)}).then(function(f){return f}).then(e,function(f){qa(\"failed to asynchronously prepare wasm: \"+f);ua(f)})}var d={a:sc};Ma++;m.monitorRunDependencies&&m.monitorRunDependencies(Ma);\nif(m.instantiateWasm)try{return m.instantiateWasm(d,b)}catch(e){qa(\"Module.instantiateWasm callback failed with error: \"+e),ba(e)}(function(){return ra||\"function\"!=typeof WebAssembly.instantiateStreaming||Pa()||N.startsWith(\"file://\")||\"function\"!=typeof fetch?c(a):fetch(N,{credentials:\"same-origin\"}).then(function(e){return WebAssembly.instantiateStreaming(e,d).then(a,function(f){qa(\"wasm streaming compile failed: \"+f);qa(\"falling back to ArrayBuffer instantiation\");return c(a)})})})().catch(ba);\nreturn{}})();m.___wasm_call_ctors=function(){return(m.___wasm_call_ctors=m.asm.N).apply(null,arguments)};var jb=m._free=function(){return(jb=m._free=m.asm.O).apply(null,arguments)},rc=m._malloc=function(){return(rc=m._malloc=m.asm.P).apply(null,arguments)},ib=m.___getTypeName=function(){return(ib=m.___getTypeName=m.asm.Q).apply(null,arguments)};m.__embind_initialize_bindings=function(){return(m.__embind_initialize_bindings=m.asm.R).apply(null,arguments)};\nm.dynCall_jiji=function(){return(m.dynCall_jiji=m.asm.T).apply(null,arguments)};var tc;Oa=function uc(){tc||vc();tc||(Oa=uc)};\nfunction vc(){function b(){if(!tc&&(tc=!0,m.calledRun=!0,!wa)){Ta(Ja);aa(m);if(m.onRuntimeInitialized)m.onRuntimeInitialized();if(m.postRun)for(\"function\"==typeof m.postRun&&(m.postRun=[m.postRun]);m.postRun.length;){var a=m.postRun.shift();Ka.unshift(a)}Ta(Ka)}}if(!(0<Ma)){if(m.preRun)for(\"function\"==typeof m.preRun&&(m.preRun=[m.preRun]);m.preRun.length;)La();Ta(Ia);0<Ma||(m.setStatus?(m.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){m.setStatus(\"\")},1);b()},1)):b())}}\nif(m.preInit)for(\"function\"==typeof m.preInit&&(m.preInit=[m.preInit]);0<m.preInit.length;)m.preInit.pop()();vc();\n\n\n  return Rive.ready\n}\n);\n})();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Rive);\n\n/***/ }),\n/* 2 */\n/***/ ((module) => {\n\nmodule.exports = JSON.parse('{\"name\":\"@rive-app/canvas\",\"version\":\"1.2.0\",\"description\":\"Rive\\'s canvas based web api.\",\"main\":\"rive.js\",\"homepage\":\"https://rive.app\",\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/rive-app/rive-wasm/tree/master/js\"},\"keywords\":[\"rive\",\"animation\"],\"author\":\"Rive\",\"contributors\":[\"Luigi Rosso <luigi@rive.app> (https://rive.app)\",\"Maxwell Talbot <max@rive.app> (https://rive.app)\",\"Arthur Vivian <arthur@rive.app> (https://rive.app)\",\"Umberto Sonnino <umberto@rive.app> (https://rive.app)\",\"Matthew Sullivan <matt.j.sullivan@gmail.com> (mailto:matt.j.sullivan@gmail.com)\"],\"license\":\"MIT\",\"files\":[\"rive.js\",\"rive.js.map\",\"rive.wasm\",\"rive.d.ts\",\"rive_advanced.mjs.d.ts\"],\"typings\":\"rive.d.ts\",\"dependencies\":{},\"browser\":{\"fs\":false,\"path\":false}}');\n\n/***/ }),\n/* 3 */\n/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_41203__) => {\n\n__nested_webpack_require_41203__.r(__webpack_exports__);\n/* harmony export */ __nested_webpack_require_41203__.d(__webpack_exports__, {\n/* harmony export */   \"registerTouchInteractions\": () => (/* reexport safe */ _registerTouchInteractions__WEBPACK_IMPORTED_MODULE_0__.registerTouchInteractions)\n/* harmony export */ });\n/* harmony import */ var _registerTouchInteractions__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_41203__(4);\n\n\n\n/***/ }),\n/* 4 */\n/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_41709__) => {\n\n__nested_webpack_require_41709__.r(__webpack_exports__);\n/* harmony export */ __nested_webpack_require_41709__.d(__webpack_exports__, {\n/* harmony export */   \"registerTouchInteractions\": () => (/* binding */ registerTouchInteractions)\n/* harmony export */ });\nvar _this = undefined;\n/**\n * Returns the clientX and clientY properties from touch or mouse events. Also\n * calls preventDefault() on the event if it is a touchstart or touchmove to prevent\n * scrolling the page on mobile devices\n * @param event - Either a TouchEvent or a MouseEvent\n * @returns - Coordinates of the clientX and clientY properties from the touch/mouse event\n */\nvar getClientCoordinates = function (event) {\n    var _a, _b;\n    if ([\"touchstart\", \"touchmove\"].indexOf(event.type) > -1 &&\n        ((_a = event.touches) === null || _a === void 0 ? void 0 : _a.length)) {\n        event.preventDefault();\n        return {\n            clientX: event.touches[0].clientX,\n            clientY: event.touches[0].clientY,\n        };\n    }\n    else if (event.type === \"touchend\" &&\n        ((_b = event.changedTouches) === null || _b === void 0 ? void 0 : _b.length)) {\n        return {\n            clientX: event.changedTouches[0].clientX,\n            clientY: event.changedTouches[0].clientY,\n        };\n    }\n    else {\n        return {\n            clientX: event.clientX,\n            clientY: event.clientY,\n        };\n    }\n};\n/**\n * Registers mouse move/up/down callback handlers on the canvas to send meaningful coordinates to\n * the state machine pointer move/up/down functions based on cursor interaction\n */\nvar registerTouchInteractions = function (_a) {\n    var canvas = _a.canvas, artboard = _a.artboard, _b = _a.stateMachines, stateMachines = _b === void 0 ? [] : _b, renderer = _a.renderer, rive = _a.rive, fit = _a.fit, alignment = _a.alignment;\n    if (!canvas ||\n        !stateMachines.length ||\n        !renderer ||\n        !rive ||\n        !artboard ||\n        typeof window === \"undefined\") {\n        return null;\n    }\n    var processEventCallback = function (event) {\n        var boundingRect = event.currentTarget.getBoundingClientRect();\n        var _a = getClientCoordinates(event), clientX = _a.clientX, clientY = _a.clientY;\n        if (!clientX && !clientY) {\n            return;\n        }\n        var canvasX = clientX - boundingRect.left;\n        var canvasY = clientY - boundingRect.top;\n        var forwardMatrix = rive.computeAlignment(fit, alignment, {\n            minX: 0,\n            minY: 0,\n            maxX: boundingRect.width,\n            maxY: boundingRect.height,\n        }, artboard.bounds);\n        var invertedMatrix = new rive.Mat2D();\n        forwardMatrix.invert(invertedMatrix);\n        var canvasCoordinatesVector = new rive.Vec2D(canvasX, canvasY);\n        var transformedVector = rive.mapXY(invertedMatrix, canvasCoordinatesVector);\n        var transformedX = transformedVector.x();\n        var transformedY = transformedVector.y();\n        transformedVector.delete();\n        invertedMatrix.delete();\n        canvasCoordinatesVector.delete();\n        forwardMatrix.delete();\n        switch (event.type) {\n            // Pointer moving/hovering on the canvas\n            case \"touchmove\":\n            case \"mouseover\":\n            case \"mouseout\":\n            case \"mousemove\": {\n                for (var _i = 0, stateMachines_1 = stateMachines; _i < stateMachines_1.length; _i++) {\n                    var stateMachine = stateMachines_1[_i];\n                    stateMachine.pointerMove(transformedX, transformedY);\n                }\n                break;\n            }\n            // Pointer click initiated but not released yet on the canvas\n            case \"touchstart\":\n            case \"mousedown\": {\n                for (var _b = 0, stateMachines_2 = stateMachines; _b < stateMachines_2.length; _b++) {\n                    var stateMachine = stateMachines_2[_b];\n                    stateMachine.pointerDown(transformedX, transformedY);\n                }\n                break;\n            }\n            // Pointer click released on the canvas\n            case \"touchend\":\n            case \"mouseup\": {\n                for (var _c = 0, stateMachines_3 = stateMachines; _c < stateMachines_3.length; _c++) {\n                    var stateMachine = stateMachines_3[_c];\n                    stateMachine.pointerUp(transformedX, transformedY);\n                }\n                break;\n            }\n            default:\n        }\n    };\n    var callback = processEventCallback.bind(_this);\n    canvas.addEventListener(\"mouseover\", callback);\n    canvas.addEventListener(\"mouseout\", callback);\n    canvas.addEventListener(\"mousemove\", callback);\n    canvas.addEventListener(\"mousedown\", callback);\n    canvas.addEventListener(\"mouseup\", callback);\n    canvas.addEventListener(\"touchmove\", callback);\n    canvas.addEventListener(\"touchstart\", callback);\n    canvas.addEventListener(\"touchend\", callback);\n    return function () {\n        canvas.removeEventListener(\"mouseover\", callback);\n        canvas.removeEventListener(\"mouseout\", callback);\n        canvas.removeEventListener(\"mousemove\", callback);\n        canvas.removeEventListener(\"mousedown\", callback);\n        canvas.removeEventListener(\"mouseup\", callback);\n        canvas.removeEventListener(\"touchmove\", callback);\n        canvas.removeEventListener(\"touchstart\", callback);\n        canvas.removeEventListener(\"touchend\", callback);\n    };\n};\n\n\n/***/ })\n/******/ \t]);\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_47371__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_47371__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_47371__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_47371__.o(definition, key) && !__nested_webpack_require_47371__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_47371__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_47371__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n(() => {\n__nested_webpack_require_47371__.r(__webpack_exports__);\n/* harmony export */ __nested_webpack_require_47371__.d(__webpack_exports__, {\n/* harmony export */   \"Fit\": () => (/* binding */ Fit),\n/* harmony export */   \"Alignment\": () => (/* binding */ Alignment),\n/* harmony export */   \"Layout\": () => (/* binding */ Layout),\n/* harmony export */   \"RuntimeLoader\": () => (/* binding */ RuntimeLoader),\n/* harmony export */   \"StateMachineInputType\": () => (/* binding */ StateMachineInputType),\n/* harmony export */   \"StateMachineInput\": () => (/* binding */ StateMachineInput),\n/* harmony export */   \"EventType\": () => (/* binding */ EventType),\n/* harmony export */   \"LoopType\": () => (/* binding */ LoopType),\n/* harmony export */   \"Rive\": () => (/* binding */ Rive),\n/* harmony export */   \"Testing\": () => (/* binding */ Testing)\n/* harmony export */ });\n/* harmony import */ var _rive_advanced_mjs__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_47371__(1);\n/* harmony import */ var package_json__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_47371__(2);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_47371__(3);\nvar __awaiter = ( false) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = ( false) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n// #region layout\n// Fit options for the canvas\nvar Fit;\n(function (Fit) {\n    Fit[\"Cover\"] = \"cover\";\n    Fit[\"Contain\"] = \"contain\";\n    Fit[\"Fill\"] = \"fill\";\n    Fit[\"FitWidth\"] = \"fitWidth\";\n    Fit[\"FitHeight\"] = \"fitHeight\";\n    Fit[\"None\"] = \"none\";\n    Fit[\"ScaleDown\"] = \"scaleDown\";\n})(Fit || (Fit = {}));\n// Alignment options for the canvas\nvar Alignment;\n(function (Alignment) {\n    Alignment[\"Center\"] = \"center\";\n    Alignment[\"TopLeft\"] = \"topLeft\";\n    Alignment[\"TopCenter\"] = \"topCenter\";\n    Alignment[\"TopRight\"] = \"topRight\";\n    Alignment[\"CenterLeft\"] = \"centerLeft\";\n    Alignment[\"CenterRight\"] = \"centerRight\";\n    Alignment[\"BottomLeft\"] = \"bottomLeft\";\n    Alignment[\"BottomCenter\"] = \"bottomCenter\";\n    Alignment[\"BottomRight\"] = \"bottomRight\";\n})(Alignment || (Alignment = {}));\n// Alignment options for Rive animations in a HTML canvas\nvar Layout = /** @class */ (function () {\n    function Layout(params) {\n        var _a, _b, _c, _d, _e, _f;\n        this.fit = (_a = params === null || params === void 0 ? void 0 : params.fit) !== null && _a !== void 0 ? _a : Fit.Contain;\n        this.alignment = (_b = params === null || params === void 0 ? void 0 : params.alignment) !== null && _b !== void 0 ? _b : Alignment.Center;\n        this.minX = (_c = params === null || params === void 0 ? void 0 : params.minX) !== null && _c !== void 0 ? _c : 0;\n        this.minY = (_d = params === null || params === void 0 ? void 0 : params.minY) !== null && _d !== void 0 ? _d : 0;\n        this.maxX = (_e = params === null || params === void 0 ? void 0 : params.maxX) !== null && _e !== void 0 ? _e : 0;\n        this.maxY = (_f = params === null || params === void 0 ? void 0 : params.maxY) !== null && _f !== void 0 ? _f : 0;\n    }\n    // Alternative constructor to build a Layout from an interface/object\n    Layout.new = function (_a) {\n        var fit = _a.fit, alignment = _a.alignment, minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n        console.warn(\"This function is deprecated: please use `new Layout({})` instead\");\n        return new Layout({ fit: fit, alignment: alignment, minX: minX, minY: minY, maxX: maxX, maxY: maxY });\n    };\n    /**\n     * Makes a copy of the layout, replacing any specified parameters\n     */\n    Layout.prototype.copyWith = function (_a) {\n        var fit = _a.fit, alignment = _a.alignment, minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n        return new Layout({\n            fit: fit !== null && fit !== void 0 ? fit : this.fit,\n            alignment: alignment !== null && alignment !== void 0 ? alignment : this.alignment,\n            minX: minX !== null && minX !== void 0 ? minX : this.minX,\n            minY: minY !== null && minY !== void 0 ? minY : this.minY,\n            maxX: maxX !== null && maxX !== void 0 ? maxX : this.maxX,\n            maxY: maxY !== null && maxY !== void 0 ? maxY : this.maxY,\n        });\n    };\n    // Returns fit for the Wasm runtime format\n    Layout.prototype.runtimeFit = function (rive) {\n        if (this.cachedRuntimeFit)\n            return this.cachedRuntimeFit;\n        var fit;\n        if (this.fit === Fit.Cover)\n            fit = rive.Fit.cover;\n        else if (this.fit === Fit.Contain)\n            fit = rive.Fit.contain;\n        else if (this.fit === Fit.Fill)\n            fit = rive.Fit.fill;\n        else if (this.fit === Fit.FitWidth)\n            fit = rive.Fit.fitWidth;\n        else if (this.fit === Fit.FitHeight)\n            fit = rive.Fit.fitHeight;\n        else if (this.fit === Fit.ScaleDown)\n            fit = rive.Fit.scaleDown;\n        else\n            fit = rive.Fit.none;\n        this.cachedRuntimeFit = fit;\n        return fit;\n    };\n    // Returns alignment for the Wasm runtime format\n    Layout.prototype.runtimeAlignment = function (rive) {\n        if (this.cachedRuntimeAlignment)\n            return this.cachedRuntimeAlignment;\n        var alignment;\n        if (this.alignment === Alignment.TopLeft)\n            alignment = rive.Alignment.topLeft;\n        else if (this.alignment === Alignment.TopCenter)\n            alignment = rive.Alignment.topCenter;\n        else if (this.alignment === Alignment.TopRight)\n            alignment = rive.Alignment.topRight;\n        else if (this.alignment === Alignment.CenterLeft)\n            alignment = rive.Alignment.centerLeft;\n        else if (this.alignment === Alignment.CenterRight)\n            alignment = rive.Alignment.centerRight;\n        else if (this.alignment === Alignment.BottomLeft)\n            alignment = rive.Alignment.bottomLeft;\n        else if (this.alignment === Alignment.BottomCenter)\n            alignment = rive.Alignment.bottomCenter;\n        else if (this.alignment === Alignment.BottomRight)\n            alignment = rive.Alignment.bottomRight;\n        else\n            alignment = rive.Alignment.center;\n        this.cachedRuntimeAlignment = alignment;\n        return alignment;\n    };\n    return Layout;\n}());\n\n// Runtime singleton; use getInstance to provide a callback that returns the\n// Rive runtime\nvar RuntimeLoader = /** @class */ (function () {\n    // Class is never instantiated\n    function RuntimeLoader() {\n    }\n    // Loads the runtime\n    RuntimeLoader.loadRuntime = function () {\n        _rive_advanced_mjs__WEBPACK_IMPORTED_MODULE_0__.default({\n            // Loads Wasm bundle\n            locateFile: function () { return RuntimeLoader.wasmURL; },\n        }).then(function (rive) {\n            var _a;\n            RuntimeLoader.runtime = rive;\n            // Fire all the callbacks\n            while (RuntimeLoader.callBackQueue.length > 0) {\n                (_a = RuntimeLoader.callBackQueue.shift()) === null || _a === void 0 ? void 0 : _a(RuntimeLoader.runtime);\n            }\n        });\n    };\n    // Provides a runtime instance via a callback\n    RuntimeLoader.getInstance = function (callback) {\n        // If it's not loading, start loading runtime\n        if (!RuntimeLoader.isLoading) {\n            RuntimeLoader.isLoading = true;\n            RuntimeLoader.loadRuntime();\n        }\n        if (!RuntimeLoader.runtime) {\n            RuntimeLoader.callBackQueue.push(callback);\n        }\n        else {\n            callback(RuntimeLoader.runtime);\n        }\n    };\n    // Provides a runtime instance via a promise\n    RuntimeLoader.awaitInstance = function () {\n        return new Promise(function (resolve) {\n            return RuntimeLoader.getInstance(function (rive) { return resolve(rive); });\n        });\n    };\n    // Manually sets the wasm url\n    RuntimeLoader.setWasmUrl = function (url) {\n        RuntimeLoader.wasmURL = url;\n    };\n    // Flag to indicate that loading has started/completed\n    RuntimeLoader.isLoading = false;\n    // List of callbacks for the runtime that come in while loading\n    RuntimeLoader.callBackQueue = [];\n    // Path to the Wasm file; default path works for testing only;\n    // if embedded wasm is used then this is never used.\n    RuntimeLoader.wasmURL = \"https://unpkg.com/\" + package_json__WEBPACK_IMPORTED_MODULE_1__.name + \"@\" + package_json__WEBPACK_IMPORTED_MODULE_1__.version + \"/rive.wasm\";\n    return RuntimeLoader;\n}());\n\n// #endregion\n// #region animations\n// Wraps animations and instances from the runtime and keeps track of playback\n// state\nvar Animation = /** @class */ (function () {\n    /**\n     * Constructs a new animation\n     * @constructor\n     * @param {any} animation: runtime animation object\n     * @param {any} instance: runtime animation instance object\n     */\n    function Animation(animation, artboard, runtime, playing) {\n        this.animation = animation;\n        this.artboard = artboard;\n        this.playing = playing;\n        this.loopCount = 0;\n        // Time to which the animation should move to on the next render\n        this.scrubTo = null;\n        this.instance = new runtime.LinearAnimationInstance(animation, artboard);\n    }\n    Object.defineProperty(Animation.prototype, \"name\", {\n        // Returns the animation's name\n        get: function () {\n            return this.animation.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Animation.prototype, \"time\", {\n        // Returns the animation's current time\n        get: function () {\n            return this.instance.time;\n        },\n        // Sets the animation's current time\n        set: function (value) {\n            this.instance.time = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Animation.prototype, \"loopValue\", {\n        // Returns the animation's loop type\n        get: function () {\n            return this.animation.loopValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Advances the animation by the give time. If the animation needs scrubbing,\n     * time is ignored and the stored scrub value is used.\n     * @param time the time to advance the animation by if no scrubbing required\n     */\n    Animation.prototype.advance = function (time) {\n        if (this.scrubTo === null) {\n            this.instance.advance(time);\n        }\n        else {\n            this.instance.time = 0;\n            this.instance.advance(this.scrubTo);\n            this.scrubTo = null;\n        }\n    };\n    /**\n     * Apply interpolated keyframe values to the artboard. This should be called after calling\n     * .advance() on an animation instance so that new values are applied to properties.\n     *\n     * Note: This does not advance the artboard, which updates all objects on the artboard\n     * @param mix - Mix value for the animation from 0 to 1\n     */\n    Animation.prototype.apply = function (mix) {\n        this.instance.apply(mix);\n    };\n    Object.defineProperty(Animation.prototype, \"needsScrub\", {\n        get: function () {\n            return this.scrubTo !== null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Deletes the backing Wasm animation instance; once this is called, this\n     * animation is no more.\n     */\n    Animation.prototype.cleanup = function () {\n        this.instance.delete();\n    };\n    return Animation;\n}());\n// #endregion\n// #region state machines\nvar StateMachineInputType;\n(function (StateMachineInputType) {\n    StateMachineInputType[StateMachineInputType[\"Number\"] = 56] = \"Number\";\n    StateMachineInputType[StateMachineInputType[\"Trigger\"] = 58] = \"Trigger\";\n    StateMachineInputType[StateMachineInputType[\"Boolean\"] = 59] = \"Boolean\";\n})(StateMachineInputType || (StateMachineInputType = {}));\n/**\n * An input for a state machine\n */\nvar StateMachineInput = /** @class */ (function () {\n    function StateMachineInput(type, runtimeInput) {\n        this.type = type;\n        this.runtimeInput = runtimeInput;\n    }\n    Object.defineProperty(StateMachineInput.prototype, \"name\", {\n        /**\n         * Returns the name of the input\n         */\n        get: function () {\n            return this.runtimeInput.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateMachineInput.prototype, \"value\", {\n        /**\n         * Returns the current value of the input\n         */\n        get: function () {\n            return this.runtimeInput.value;\n        },\n        /**\n         * Sets the value of the input\n         */\n        set: function (value) {\n            this.runtimeInput.value = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Fires a trigger; does nothing on Number or Boolean input types\n     */\n    StateMachineInput.prototype.fire = function () {\n        if (this.type === StateMachineInputType.Trigger) {\n            this.runtimeInput.fire();\n        }\n    };\n    return StateMachineInput;\n}());\n\nvar StateMachine = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param stateMachine runtime state machine object\n     * @param instance runtime state machine instance object\n     */\n    function StateMachine(stateMachine, runtime, playing, artboard) {\n        this.stateMachine = stateMachine;\n        this.playing = playing;\n        this.artboard = artboard;\n        /**\n         * Caches the inputs from the runtime\n         */\n        this.inputs = [];\n        this.instance = new runtime.StateMachineInstance(stateMachine, artboard);\n        this.initInputs(runtime);\n    }\n    Object.defineProperty(StateMachine.prototype, \"name\", {\n        get: function () {\n            return this.stateMachine.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateMachine.prototype, \"statesChanged\", {\n        /**\n         * Returns a list of state names that have changed on this frame\n         */\n        get: function () {\n            var names = [];\n            for (var i = 0; i < this.instance.stateChangedCount(); i++) {\n                names.push(this.instance.stateChangedNameByIndex(i));\n            }\n            return names;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Advances the state machine instance by a given time.\n     * @param time - the time to advance the animation by in seconds\n     */\n    StateMachine.prototype.advance = function (time) {\n        this.instance.advance(time);\n    };\n    /**\n     * Fetches references to the state machine's inputs and caches them\n     * @param runtime an instance of the runtime; needed for the SMIInput types\n     */\n    StateMachine.prototype.initInputs = function (runtime) {\n        // Fetch the inputs from the runtime if we don't have them\n        for (var i = 0; i < this.instance.inputCount(); i++) {\n            var input = this.instance.input(i);\n            this.inputs.push(this.mapRuntimeInput(input, runtime));\n        }\n    };\n    /**\n     * Maps a runtime input to it's appropriate type\n     * @param input\n     */\n    StateMachine.prototype.mapRuntimeInput = function (input, runtime) {\n        if (input.type === runtime.SMIInput.bool) {\n            return new StateMachineInput(StateMachineInputType.Boolean, input.asBool());\n        }\n        else if (input.type === runtime.SMIInput.number) {\n            return new StateMachineInput(StateMachineInputType.Number, input.asNumber());\n        }\n        else if (input.type === runtime.SMIInput.trigger) {\n            return new StateMachineInput(StateMachineInputType.Trigger, input.asTrigger());\n        }\n    };\n    /**\n     * Deletes the backing Wasm state machine instance; once this is called, this\n     * state machine is no more.\n     */\n    StateMachine.prototype.cleanup = function () {\n        this.instance.delete();\n    };\n    return StateMachine;\n}());\n// #endregion\n// #region animator\n/**\n * Manages animation\n */\nvar Animator = /** @class */ (function () {\n    /**\n     * Constructs a new animator\n     * @constructor\n     * @param runtime Rive runtime; needed to instance animations & state machines\n     * @param artboard the artboard that holds all animations and state machines\n     * @param animations optional list of animations\n     * @param stateMachines optional list of state machines\n     */\n    function Animator(runtime, artboard, eventManager, animations, stateMachines) {\n        if (animations === void 0) { animations = []; }\n        if (stateMachines === void 0) { stateMachines = []; }\n        this.runtime = runtime;\n        this.artboard = artboard;\n        this.eventManager = eventManager;\n        this.animations = animations;\n        this.stateMachines = stateMachines;\n    }\n    /**\n     * Adds animations and state machines by their names. If names are shared\n     * between animations & state machines, then the first one found will be\n     * created. Best not to use the same names for these in your Rive file.\n     * @param animatable the name(s) of animations and state machines to add\n     * @returns a list of names of the playing animations and state machines\n     */\n    Animator.prototype.add = function (animatables, playing, fireEvent) {\n        if (fireEvent === void 0) { fireEvent = true; }\n        animatables = mapToStringArray(animatables);\n        // If animatables is empty, play or pause everything\n        if (animatables.length === 0) {\n            this.animations.forEach(function (a) { return (a.playing = playing); });\n            this.stateMachines.forEach(function (m) { return (m.playing = playing); });\n        }\n        else {\n            // Play/pause already instanced items, or create new instances\n            var instancedAnimationNames = this.animations.map(function (a) { return a.name; });\n            var instancedMachineNames = this.stateMachines.map(function (m) { return m.name; });\n            for (var i = 0; i < animatables.length; i++) {\n                var aIndex = instancedAnimationNames.indexOf(animatables[i]);\n                var mIndex = instancedMachineNames.indexOf(animatables[i]);\n                if (aIndex >= 0 || mIndex >= 0) {\n                    if (aIndex >= 0) {\n                        // Animation is instanced, play/pause it\n                        this.animations[aIndex].playing = playing;\n                    }\n                    else {\n                        // State machine is instanced, play/pause it\n                        this.stateMachines[mIndex].playing = playing;\n                    }\n                }\n                else {\n                    // Try to create a new animation instance\n                    var anim = this.artboard.animationByName(animatables[i]);\n                    if (anim) {\n                        var newAnimation = new Animation(anim, this.artboard, this.runtime, playing);\n                        // Display the first frame of the specified animation\n                        newAnimation.advance(0);\n                        newAnimation.apply(1.0);\n                        this.animations.push(newAnimation);\n                    }\n                    else {\n                        // Try to create a new state machine instance\n                        var sm = this.artboard.stateMachineByName(animatables[i]);\n                        if (sm) {\n                            var newStateMachine = new StateMachine(sm, this.runtime, playing, this.artboard);\n                            this.stateMachines.push(newStateMachine);\n                        }\n                    }\n                }\n            }\n        }\n        // Fire play/paused events for animations\n        if (fireEvent) {\n            if (playing) {\n                this.eventManager.fire({\n                    type: EventType.Play,\n                    data: this.playing,\n                });\n            }\n            else {\n                this.eventManager.fire({\n                    type: EventType.Pause,\n                    data: this.paused,\n                });\n            }\n        }\n        return playing ? this.playing : this.paused;\n    };\n    /**\n     * Play the named animations/state machines\n     * @param animatables the names of the animations/machines to play; plays all if empty\n     * @returns a list of the playing items\n     */\n    Animator.prototype.play = function (animatables) {\n        return this.add(animatables, true);\n    };\n    /**\n     * Pauses named animations and state machines, or everything if nothing is\n     * specified\n     * @param animatables names of the animations and state machines to pause\n     * @returns a list of names of the animations and state machines paused\n     */\n    Animator.prototype.pause = function (animatables) {\n        return this.add(animatables, false);\n    };\n    /**\n     * Set time of named animations\n     * @param animations names of the animations to scrub\n     * @param value time scrub value, a floating point number to which the playhead is jumped\n     * @returns a list of names of the animations that were scrubbed\n     */\n    Animator.prototype.scrub = function (animatables, value) {\n        var forScrubbing = this.animations.filter(function (a) {\n            return animatables.includes(a.name);\n        });\n        forScrubbing.forEach(function (a) { return (a.scrubTo = value); });\n        return forScrubbing.map(function (a) { return a.name; });\n    };\n    Object.defineProperty(Animator.prototype, \"playing\", {\n        /**\n         * Returns a list of names of all animations and state machines currently\n         * playing\n         */\n        get: function () {\n            return this.animations\n                .filter(function (a) { return a.playing; })\n                .map(function (a) { return a.name; })\n                .concat(this.stateMachines.filter(function (m) { return m.playing; }).map(function (m) { return m.name; }));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Animator.prototype, \"paused\", {\n        /**\n         * Returns a list of names of all animations and state machines currently\n         * paused\n         */\n        get: function () {\n            return this.animations\n                .filter(function (a) { return !a.playing; })\n                .map(function (a) { return a.name; })\n                .concat(this.stateMachines.filter(function (m) { return !m.playing; }).map(function (m) { return m.name; }));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Stops and removes all named animations and state machines\n     * @param animatables animations and state machines to remove\n     * @returns a list of names of removed items\n     */\n    Animator.prototype.stop = function (animatables) {\n        var _this = this;\n        animatables = mapToStringArray(animatables);\n        // If nothing's specified, wipe them out, all of them\n        var removedNames = [];\n        // Stop everything\n        if (animatables.length === 0) {\n            removedNames = this.animations\n                .map(function (a) { return a.name; })\n                .concat(this.stateMachines.map(function (m) { return m.name; }));\n            // Clean up before emptying the arrays\n            this.animations.forEach(function (a) { return a.cleanup(); });\n            this.stateMachines.forEach(function (m) { return m.cleanup(); });\n            // Empty out the arrays\n            this.animations.splice(0, this.animations.length);\n            this.stateMachines.splice(0, this.stateMachines.length);\n        }\n        else {\n            // Remove only the named animations/state machines\n            var animationsToRemove = this.animations.filter(function (a) {\n                return animatables.includes(a.name);\n            });\n            animationsToRemove.forEach(function (a) {\n                a.cleanup();\n                _this.animations.splice(_this.animations.indexOf(a), 1);\n            });\n            var machinesToRemove = this.stateMachines.filter(function (m) {\n                return animatables.includes(m.name);\n            });\n            machinesToRemove.forEach(function (m) {\n                m.cleanup();\n                _this.stateMachines.splice(_this.stateMachines.indexOf(m), 1);\n            });\n            removedNames = animationsToRemove\n                .map(function (a) { return a.name; })\n                .concat(machinesToRemove.map(function (m) { return m.name; }));\n        }\n        this.eventManager.fire({\n            type: EventType.Stop,\n            data: removedNames,\n        });\n        // Return the list of animations removed\n        return removedNames;\n    };\n    Object.defineProperty(Animator.prototype, \"isPlaying\", {\n        /**\n         * Returns true if at least one animation is active\n         */\n        get: function () {\n            return (this.animations.reduce(function (acc, curr) { return acc || curr.playing; }, false) ||\n                this.stateMachines.reduce(function (acc, curr) { return acc || curr.playing; }, false));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Animator.prototype, \"isPaused\", {\n        /**\n         * Returns true if all animations are paused and there's at least one animation\n         */\n        get: function () {\n            return (!this.isPlaying &&\n                (this.animations.length > 0 || this.stateMachines.length > 0));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Animator.prototype, \"isStopped\", {\n        /**\n         * Returns true if there are no playing or paused animations/state machines\n         */\n        get: function () {\n            return this.animations.length === 0 && this.stateMachines.length === 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * If there are no animations or state machines, add the first one found\n     * @returns the name of the animation or state machine instanced\n     */\n    Animator.prototype.atLeastOne = function (playing, fireEvent) {\n        if (fireEvent === void 0) { fireEvent = true; }\n        var instancedName;\n        if (this.animations.length === 0 && this.stateMachines.length === 0) {\n            if (this.artboard.animationCount() > 0) {\n                // Add the first animation\n                this.add([(instancedName = this.artboard.animationByIndex(0).name)], playing, fireEvent);\n            }\n            else if (this.artboard.stateMachineCount() > 0) {\n                // Add the first state machine\n                this.add([(instancedName = this.artboard.stateMachineByIndex(0).name)], playing, fireEvent);\n            }\n        }\n        return instancedName;\n    };\n    /**\n     * Checks if any animations have looped and if so, fire the appropriate event\n     */\n    Animator.prototype.handleLooping = function () {\n        for (var _i = 0, _a = this.animations.filter(function (a) { return a.playing; }); _i < _a.length; _i++) {\n            var animation = _a[_i];\n            // Emit if the animation looped\n            if (animation.loopValue === 0 && animation.loopCount) {\n                animation.loopCount = 0;\n                // This is a one-shot; if it has ended, delete the instance\n                this.stop(animation.name);\n            }\n            else if (animation.loopValue === 1 && animation.loopCount) {\n                this.eventManager.fire({\n                    type: EventType.Loop,\n                    data: { animation: animation.name, type: LoopType.Loop },\n                });\n                animation.loopCount = 0;\n            }\n            // Wasm indicates a loop at each time the animation\n            // changes direction, so a full loop/lap occurs every\n            // two loop counts\n            else if (animation.loopValue === 2 && animation.loopCount > 1) {\n                this.eventManager.fire({\n                    type: EventType.Loop,\n                    data: { animation: animation.name, type: LoopType.PingPong },\n                });\n                animation.loopCount = 0;\n            }\n        }\n    };\n    /**\n     * Checks if states have changed in state machines and fires a statechange\n     * event\n     */\n    Animator.prototype.handleStateChanges = function () {\n        var statesChanged = [];\n        for (var _i = 0, _a = this.stateMachines.filter(function (sm) { return sm.playing; }); _i < _a.length; _i++) {\n            var stateMachine = _a[_i];\n            statesChanged.push.apply(statesChanged, stateMachine.statesChanged);\n        }\n        if (statesChanged.length > 0) {\n            this.eventManager.fire({\n                type: EventType.StateChange,\n                data: statesChanged,\n            });\n        }\n    };\n    return Animator;\n}());\n// #endregion\n// #region events\n/**\n * Supported event types triggered in Rive\n */\nvar EventType;\n(function (EventType) {\n    EventType[\"Load\"] = \"load\";\n    EventType[\"LoadError\"] = \"loaderror\";\n    EventType[\"Play\"] = \"play\";\n    EventType[\"Pause\"] = \"pause\";\n    EventType[\"Stop\"] = \"stop\";\n    EventType[\"Loop\"] = \"loop\";\n    EventType[\"Draw\"] = \"draw\";\n    EventType[\"StateChange\"] = \"statechange\";\n})(EventType || (EventType = {}));\n/**\n * Looping types: one-shot, loop, and ping-pong\n */\nvar LoopType;\n(function (LoopType) {\n    LoopType[\"OneShot\"] = \"oneshot\";\n    LoopType[\"Loop\"] = \"loop\";\n    LoopType[\"PingPong\"] = \"pingpong\";\n})(LoopType || (LoopType = {}));\n// Manages Rive events and listeners\nvar EventManager = /** @class */ (function () {\n    function EventManager(listeners) {\n        if (listeners === void 0) { listeners = []; }\n        this.listeners = listeners;\n    }\n    // Gets listeners of specified type\n    EventManager.prototype.getListeners = function (type) {\n        return this.listeners.filter(function (e) { return e.type === type; });\n    };\n    // Adds a listener\n    EventManager.prototype.add = function (listener) {\n        if (!this.listeners.includes(listener)) {\n            this.listeners.push(listener);\n        }\n    };\n    /**\n     * Removes a listener\n     * @param listener the listener with the callback to be removed\n     */\n    EventManager.prototype.remove = function (listener) {\n        // We can't simply look for the listener as it'll be a different instance to\n        // one originally subscribed. Find all the listeners of the right type and\n        // then check their callbacks which should match.\n        for (var i = 0; i < this.listeners.length; i++) {\n            var currentListener = this.listeners[i];\n            if (currentListener.type === listener.type) {\n                if (currentListener.callback === listener.callback) {\n                    this.listeners.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    };\n    /**\n     * Clears all listeners of specified type, or every listener if no type is\n     * specified\n     * @param type the type of listeners to clear, or all listeners if not\n     * specified\n     */\n    EventManager.prototype.removeAll = function (type) {\n        var _this = this;\n        if (!type) {\n            this.listeners.splice(0, this.listeners.length);\n        }\n        else {\n            this.listeners\n                .filter(function (l) { return l.type === type; })\n                .forEach(function (l) { return _this.remove(l); });\n        }\n    };\n    // Fires an event\n    EventManager.prototype.fire = function (event) {\n        var eventListeners = this.getListeners(event.type);\n        eventListeners.forEach(function (listener) { return listener.callback(event); });\n    };\n    return EventManager;\n}());\n// Manages a queue of tasks\nvar TaskQueueManager = /** @class */ (function () {\n    function TaskQueueManager(eventManager) {\n        this.eventManager = eventManager;\n        this.queue = [];\n    }\n    // Adds a task top the queue\n    TaskQueueManager.prototype.add = function (task) {\n        this.queue.push(task);\n    };\n    // Processes all tasks in the queue\n    TaskQueueManager.prototype.process = function () {\n        while (this.queue.length > 0) {\n            var task = this.queue.shift();\n            if (task === null || task === void 0 ? void 0 : task.action) {\n                task.action();\n            }\n            if (task === null || task === void 0 ? void 0 : task.event) {\n                this.eventManager.fire(task.event);\n            }\n        }\n    };\n    return TaskQueueManager;\n}());\nvar Rive = /** @class */ (function () {\n    function Rive(params) {\n        var _a;\n        // Tracks if a Rive file is loaded\n        this.loaded = false;\n        /**\n         * Tracks if a Rive file is loaded; we need this in addition to loaded as some\n         * commands (e.g. contents) can be called as soon as the file is loaded.\n         * However, playback commands need to be queued and run in order once initial\n         * animations and autoplay has been sorted out. This applies to play, pause,\n         * and start.\n         */\n        this.readyForPlaying = false;\n        // Runtime artboard\n        this.artboard = null;\n        // place to clear up event listeners\n        this.eventCleanup = null;\n        this.shouldDisableRiveListeners = false;\n        // Durations to generate a frame for the last second. Used for performance profiling.\n        this.durations = [];\n        this.frameTimes = [];\n        this.frameCount = 0;\n        /**\n         * Used be draw to track when a second of active rendering time has passed.\n         * Used for debugging purposes\n         */\n        this.renderSecondTimer = 0;\n        this.canvas = params.canvas;\n        this.src = params.src;\n        this.buffer = params.buffer;\n        this.layout = (_a = params.layout) !== null && _a !== void 0 ? _a : new Layout();\n        this.shouldDisableRiveListeners = !!params.shouldDisableRiveListeners;\n        // New event management system\n        this.eventManager = new EventManager();\n        if (params.onLoad)\n            this.on(EventType.Load, params.onLoad);\n        if (params.onLoadError)\n            this.on(EventType.LoadError, params.onLoadError);\n        if (params.onPlay)\n            this.on(EventType.Play, params.onPlay);\n        if (params.onPause)\n            this.on(EventType.Pause, params.onPause);\n        if (params.onStop)\n            this.on(EventType.Stop, params.onStop);\n        if (params.onLoop)\n            this.on(EventType.Loop, params.onLoop);\n        if (params.onStateChange)\n            this.on(EventType.StateChange, params.onStateChange);\n        /**\n         * @deprecated Use camelCase'd versions instead.\n         */\n        if (params.onload && !params.onLoad)\n            this.on(EventType.Load, params.onload);\n        if (params.onloaderror && !params.onLoadError)\n            this.on(EventType.LoadError, params.onloaderror);\n        if (params.onplay && !params.onPlay)\n            this.on(EventType.Play, params.onplay);\n        if (params.onpause && !params.onPause)\n            this.on(EventType.Pause, params.onpause);\n        if (params.onstop && !params.onStop)\n            this.on(EventType.Stop, params.onstop);\n        if (params.onloop && !params.onLoop)\n            this.on(EventType.Loop, params.onloop);\n        if (params.onstatechange && !params.onStateChange)\n            this.on(EventType.StateChange, params.onstatechange);\n        // Hook up the task queue\n        this.taskQueue = new TaskQueueManager(this.eventManager);\n        this.init({\n            src: this.src,\n            buffer: this.buffer,\n            autoplay: params.autoplay,\n            animations: params.animations,\n            stateMachines: params.stateMachines,\n            artboard: params.artboard,\n            useOffscreenRenderer: params.useOffscreenRenderer,\n        });\n    }\n    // Alternative constructor to build a Rive instance from an interface/object\n    Rive.new = function (params) {\n        console.warn(\"This function is deprecated: please use `new Rive({})` instead\");\n        return new Rive(params);\n    };\n    // Initializes the Rive object either from constructor or load()\n    Rive.prototype.init = function (_a) {\n        var _this = this;\n        var src = _a.src, buffer = _a.buffer, animations = _a.animations, stateMachines = _a.stateMachines, artboard = _a.artboard, _b = _a.autoplay, autoplay = _b === void 0 ? false : _b, _c = _a.useOffscreenRenderer, useOffscreenRenderer = _c === void 0 ? false : _c;\n        this.src = src;\n        this.buffer = buffer;\n        // If no source file url specified, it's a bust\n        if (!this.src && !this.buffer) {\n            throw new Error(Rive.missingErrorMessage);\n        }\n        // List of animations that should be initialized.\n        var startingAnimationNames = mapToStringArray(animations);\n        // List of state machines that should be initialized\n        var startingStateMachineNames = mapToStringArray(stateMachines);\n        // Ensure loaded is marked as false if loading new file\n        this.loaded = false;\n        this.readyForPlaying = false;\n        // Ensure the runtime is loaded\n        RuntimeLoader.awaitInstance()\n            .then(function (runtime) {\n            _this.runtime = runtime;\n            // Get the canvas where you want to render the animation and create a renderer\n            _this.renderer = _this.runtime.makeRenderer(_this.canvas, useOffscreenRenderer);\n            // Initial size adjustment based on devicePixelRatio if no width/height are\n            // specified explicitly\n            if (!(_this.canvas.width || _this.canvas.height)) {\n                _this.resizeDrawingSurfaceToCanvas();\n            }\n            // Load Rive data from a source uri or a data buffer\n            _this.initData(artboard, startingAnimationNames, startingStateMachineNames, autoplay)\n                .then(function () { return _this.setupRiveListeners(); })\n                .catch(function (e) {\n                console.error(e);\n            });\n        })\n            .catch(function (e) {\n            console.error(e);\n        });\n    };\n    Rive.prototype.setupRiveListeners = function () {\n        var _this = this;\n        if (!this.shouldDisableRiveListeners) {\n            var activeStateMachines = (this.animator.stateMachines || [])\n                .filter(function (sm) { return sm.playing && _this.runtime.hasListeners(sm.instance); })\n                .map(function (sm) { return sm.instance; });\n            this.eventCleanup = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.registerTouchInteractions)({\n                canvas: this.canvas,\n                artboard: this.artboard,\n                stateMachines: activeStateMachines,\n                renderer: this.renderer,\n                rive: this.runtime,\n                fit: this._layout.runtimeFit(this.runtime),\n                alignment: this._layout.runtimeAlignment(this.runtime),\n            });\n        }\n    };\n    // Initializes runtime with Rive data and preps for playing\n    Rive.prototype.initData = function (artboardName, animationNames, stateMachineNames, autoplay) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var _b, _c, msg;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        if (!this.src) return [3 /*break*/, 2];\n                        _b = this;\n                        return [4 /*yield*/, loadRiveFile(this.src)];\n                    case 1:\n                        _b.buffer = _d.sent();\n                        _d.label = 2;\n                    case 2:\n                        // Load the Rive file\n                        _c = this;\n                        return [4 /*yield*/, this.runtime.load(new Uint8Array(this.buffer))];\n                    case 3:\n                        // Load the Rive file\n                        _c.file = _d.sent();\n                        if (this.file) {\n                            // Initialize and draw frame\n                            this.initArtboard(artboardName, animationNames, stateMachineNames, autoplay);\n                            // Everything's set up, emit a load event\n                            this.loaded = true;\n                            this.eventManager.fire({\n                                type: EventType.Load,\n                                data: (_a = this.src) !== null && _a !== void 0 ? _a : \"buffer\",\n                            });\n                            // Flag ready for playback commands and clear the task queue; this order\n                            // is important or it may infinitely recurse\n                            this.readyForPlaying = true;\n                            this.taskQueue.process();\n                            this.drawFrame();\n                            return [2 /*return*/, Promise.resolve()];\n                        }\n                        else {\n                            msg = \"Problem loading file; may be corrupt!\";\n                            console.warn(msg);\n                            this.eventManager.fire({ type: EventType.LoadError, data: msg });\n                            return [2 /*return*/, Promise.reject(msg)];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Initialize for playback\n    Rive.prototype.initArtboard = function (artboardName, animationNames, stateMachineNames, autoplay) {\n        // Fetch the artboard\n        var rootArtboard = artboardName\n            ? this.file.artboardByName(artboardName)\n            : this.file.defaultArtboard();\n        // Check we have a working artboard\n        if (!rootArtboard) {\n            var msg = \"Invalid artboard name or no default artboard\";\n            console.warn(msg);\n            this.eventManager.fire({ type: EventType.LoadError, data: msg });\n            return;\n        }\n        this.artboard = rootArtboard;\n        // Check that the artboard has at least 1 animation\n        if (this.artboard.animationCount() < 1) {\n            var msg = \"Artboard has no animations\";\n            this.eventManager.fire({ type: EventType.LoadError, data: msg });\n            throw msg;\n        }\n        // Initialize the animator\n        this.animator = new Animator(this.runtime, this.artboard, this.eventManager);\n        // Initialize the animations; as loaded hasn't happened yet, we need to\n        // suppress firing the play/pause events until the load event has fired. To\n        // do this we tell the animator to suppress firing events, and add event\n        // firing to the task queue.\n        var instanceNames;\n        if (animationNames.length > 0 || stateMachineNames.length > 0) {\n            instanceNames = animationNames.concat(stateMachineNames);\n            this.animator.add(instanceNames, autoplay, false);\n        }\n        else {\n            instanceNames = [this.animator.atLeastOne(autoplay, false)];\n        }\n        // Queue up firing the playback events\n        this.taskQueue.add({\n            event: {\n                type: autoplay ? EventType.Play : EventType.Pause,\n                data: instanceNames,\n            },\n        });\n    };\n    // Draws the current artboard frame\n    Rive.prototype.drawFrame = function () {\n        this.startRendering();\n    };\n    /**\n     * Draw rendering loop; renders animation frames at the correct time interval.\n     * @param time the time at which to render a frame\n     */\n    Rive.prototype.draw = function (time, onSecond) {\n        var before = performance.now();\n        // Clear the frameRequestId, as we're now rendering a fresh frame\n        this.frameRequestId = null;\n        // On the first pass, make sure lastTime has a valid value\n        if (!this.lastRenderTime) {\n            this.lastRenderTime = time;\n        }\n        // Handle the onSecond callback\n        this.renderSecondTimer += time - this.lastRenderTime;\n        if (this.renderSecondTimer > 5000) {\n            this.renderSecondTimer = 0;\n            onSecond === null || onSecond === void 0 ? void 0 : onSecond();\n        }\n        // Calculate the elapsed time between frames in seconds\n        var elapsedTime = (time - this.lastRenderTime) / 1000;\n        this.lastRenderTime = time;\n        // - Advance non-paused animations by the elapsed number of seconds\n        // - Advance any animations that require scrubbing\n        // - Advance to the first frame even when autoplay is false\n        var activeAnimations = this.animator.animations\n            .filter(function (a) { return a.playing || a.needsScrub; })\n            // The scrubbed animations must be applied first to prevent weird artifacts\n            // if the playing animations conflict with the scrubbed animating attribuates.\n            .sort(function (first) { return (first.needsScrub ? -1 : 1); });\n        for (var _i = 0, activeAnimations_1 = activeAnimations; _i < activeAnimations_1.length; _i++) {\n            var animation = activeAnimations_1[_i];\n            animation.advance(elapsedTime);\n            if (animation.instance.didLoop) {\n                animation.loopCount += 1;\n            }\n            animation.apply(1.0);\n        }\n        // - Advance non-paused state machines by the elapsed number of seconds\n        // - Advance to the first frame even when autoplay is false\n        var activeStateMachines = this.animator.stateMachines.filter(function (a) { return a.playing; });\n        for (var _a = 0, activeStateMachines_1 = activeStateMachines; _a < activeStateMachines_1.length; _a++) {\n            var stateMachine = activeStateMachines_1[_a];\n            stateMachine.advance(elapsedTime);\n            // stateMachine.instance.apply(this.artboard);\n        }\n        // Once the animations have been applied to the artboard, advance it\n        // by the elapsed time.\n        this.artboard.advance(elapsedTime);\n        var renderer = this.renderer;\n        // Canvas must be wiped to prevent artifacts\n        renderer.clear();\n        renderer.save();\n        // Update the renderer alignment if necessary\n        this.alignRenderer();\n        this.artboard.draw(renderer);\n        renderer.restore();\n        renderer.flush();\n        // Check for any animations that looped\n        this.animator.handleLooping();\n        // Check for any state machines that had a state change\n        this.animator.handleStateChanges();\n        // Add duration to create frame to durations array\n        this.frameCount++;\n        var after = performance.now();\n        this.frameTimes.push(after);\n        this.durations.push(after - before);\n        while (this.frameTimes[0] <= after - 1000) {\n            this.frameTimes.shift();\n            this.durations.shift();\n        }\n        // Calling requestAnimationFrame will rerun draw() at the correct rate:\n        // https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations\n        if (this.animator.isPlaying) {\n            // Request a new rendering frame\n            this.startRendering();\n        }\n        else if (this.animator.isPaused) {\n            // Reset the end time so on playback it starts at the correct frame\n            this.lastRenderTime = 0;\n        }\n        else if (this.animator.isStopped) {\n            // Reset animation instances, artboard and time\n            // TODO: implement this properly when we have instancing\n            // this.initArtboard();\n            // this.drawFrame();\n            this.lastRenderTime = 0;\n        }\n    };\n    /**\n     * Align the renderer\n     */\n    Rive.prototype.alignRenderer = function () {\n        var _a = this, renderer = _a.renderer, runtime = _a.runtime, _layout = _a._layout, artboard = _a.artboard;\n        // Align things up safe in the knowledge we can restore if changed\n        renderer.align(_layout.runtimeFit(runtime), _layout.runtimeAlignment(runtime), {\n            minX: _layout.minX,\n            minY: _layout.minY,\n            maxX: _layout.maxX,\n            maxY: _layout.maxY,\n        }, artboard.bounds);\n    };\n    Object.defineProperty(Rive.prototype, \"fps\", {\n        get: function () {\n            return this.durations.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"frameTime\", {\n        get: function () {\n            if (this.durations.length === 0) {\n                return 0;\n            }\n            return (this.durations.reduce(function (a, b) { return a + b; }, 0) / this.durations.length).toFixed(4);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Cleans up all Wasm-generated objects that need to be manually destroyed:\n     * artboard instances, animation instances, state machine instances,\n     * renderer instance, file and runtime.\n     *\n     * Once this is called, you will need to initialise a new instance of the\n     * Rive class\n     */\n    Rive.prototype.cleanup = function () {\n        var _a, _b;\n        // Stop the renderer if it hasn't already been stopped.\n        this.stopRendering();\n        // Clean up any artboard, animation or state machine instances.\n        this.cleanupInstances();\n        // Delete the renderer\n        (_a = this.renderer) === null || _a === void 0 ? void 0 : _a.delete();\n        this.renderer = null;\n        // Delete the rive file\n        (_b = this.file) === null || _b === void 0 ? void 0 : _b.delete();\n        this.file = null;\n    };\n    /**\n     * Cleans up any Wasm-generated objects that need to be manually destroyed:\n     * artboard instances, animation instances, state machine instances.\n     *\n     * Once this is called, things will need to be reinitialized or bad things\n     * might happen.\n     */\n    Rive.prototype.cleanupInstances = function () {\n        if (this.eventCleanup !== null) {\n            this.eventCleanup();\n        }\n        // Delete all animation and state machine instances\n        this.stop();\n        if (this.artboard) {\n            this.artboard.delete();\n            this.artboard = null;\n        }\n    };\n    // Plays specified animations; if none specified, it unpauses everything.\n    Rive.prototype.play = function (animationNames, autoplay) {\n        var _this = this;\n        animationNames = mapToStringArray(animationNames);\n        // If the file's not loaded, queue up the play\n        if (!this.readyForPlaying) {\n            this.taskQueue.add({\n                action: function () { return _this.play(animationNames, autoplay); },\n            });\n            return;\n        }\n        this.animator.play(animationNames);\n        if (this.eventCleanup) {\n            this.eventCleanup();\n        }\n        this.setupRiveListeners();\n        this.startRendering();\n    };\n    // Pauses specified animations; if none specified, pauses all.\n    Rive.prototype.pause = function (animationNames) {\n        var _this = this;\n        animationNames = mapToStringArray(animationNames);\n        // If the file's not loaded, early out, nothing to pause\n        if (!this.readyForPlaying) {\n            this.taskQueue.add({\n                action: function () { return _this.pause(animationNames); },\n            });\n            return;\n        }\n        this.animator.pause(animationNames);\n    };\n    Rive.prototype.scrub = function (animationNames, value) {\n        var _this = this;\n        animationNames = mapToStringArray(animationNames);\n        // If the file's not loaded, early out, nothing to pause\n        if (!this.readyForPlaying) {\n            this.taskQueue.add({\n                action: function () { return _this.scrub(animationNames, value); },\n            });\n            return;\n        }\n        // Scrub the animation time; we draw a single frame here so that if\n        // nothing's currently playing, the scrubbed animation is still rendered/\n        this.animator.scrub(animationNames, value || 0);\n        this.drawFrame();\n    };\n    // Stops specified animations; if none specifies, stops them all.\n    Rive.prototype.stop = function (animationNames) {\n        var _this = this;\n        animationNames = mapToStringArray(animationNames);\n        // If the file's not loaded, early out, nothing to pause\n        if (!this.readyForPlaying) {\n            this.taskQueue.add({\n                action: function () { return _this.stop(animationNames); },\n            });\n            return;\n        }\n        this.animator.stop(animationNames);\n        if (this.eventCleanup) {\n            this.eventCleanup();\n        }\n    };\n    /**\n     * Resets the animation\n     * @param artboard the name of the artboard, or default if none given\n     * @param animations the names of animations for playback\n     * @param stateMachines the names of state machines for playback\n     * @param autoplay whether to autoplay when reset, defaults to false\n     *\n     */\n    Rive.prototype.reset = function (params) {\n        var _a;\n        // Get the current artboard, animations, state machines, and playback states\n        var artBoardName = params === null || params === void 0 ? void 0 : params.artboard;\n        var animationNames = mapToStringArray(params === null || params === void 0 ? void 0 : params.animations);\n        var stateMachineNames = mapToStringArray(params === null || params === void 0 ? void 0 : params.stateMachines);\n        var autoplay = (_a = params === null || params === void 0 ? void 0 : params.autoplay) !== null && _a !== void 0 ? _a : false;\n        // Stop everything and clean up\n        this.cleanupInstances();\n        // Reinitialize an artboard instance with the state\n        this.initArtboard(artBoardName, animationNames, stateMachineNames, autoplay);\n        this.taskQueue.process();\n    };\n    // Loads a new Rive file, keeping listeners in place\n    Rive.prototype.load = function (params) {\n        // Stop all animations\n        this.stop();\n        // Reinitialize\n        this.init(params);\n    };\n    Object.defineProperty(Rive.prototype, \"layout\", {\n        /**\n         * Returns the current layout. Note that layout should be treated as\n         * immutable. If you want to change the layout, create a new one use the\n         * layout setter\n         */\n        get: function () {\n            return this._layout;\n        },\n        // Sets a new layout\n        set: function (layout) {\n            this._layout = layout;\n            // If the maxX or maxY are 0, then set them to the canvas width and height\n            if (!layout.maxX || !layout.maxY) {\n                this.resizeToCanvas();\n            }\n            if (this.loaded && !this.animator.isPlaying) {\n                this.drawFrame();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Sets the layout bounds to the current canvas size; this is typically called\n     * when the canvas is resized\n     */\n    Rive.prototype.resizeToCanvas = function () {\n        this._layout = this.layout.copyWith({\n            minX: 0,\n            minY: 0,\n            maxX: this.canvas.width,\n            maxY: this.canvas.height,\n        });\n    };\n    /**\n     * Accounts for devicePixelRatio as a multiplier to render the size of the canvas drawing surface.\n     * Uses the size of the backing canvas to set new width/height attributes. Need to re-render\n     * and resize the layout to match the new drawing surface afterwards.\n     * Useful function for consumers to include in a window resize listener\n     */\n    Rive.prototype.resizeDrawingSurfaceToCanvas = function () {\n        if (this.canvas instanceof HTMLCanvasElement && !!window) {\n            var _a = this.canvas.getBoundingClientRect(), width = _a.width, height = _a.height;\n            var dpr = window.devicePixelRatio || 1;\n            this.canvas.width = dpr * width;\n            this.canvas.height = dpr * height;\n            this.startRendering();\n            this.resizeToCanvas();\n        }\n    };\n    Object.defineProperty(Rive.prototype, \"source\", {\n        // Returns the animation source, which may be undefined\n        get: function () {\n            return this.src;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"activeArtboard\", {\n        /**\n         * Returns the name of the active artboard\n         */\n        get: function () {\n            return this.artboard ? this.artboard.name : \"\";\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"animationNames\", {\n        // Returns a list of animation names on the chosen artboard\n        get: function () {\n            // If the file's not loaded, we got nothing to return\n            if (!this.loaded) {\n                return [];\n            }\n            var animationNames = [];\n            for (var i = 0; i < this.artboard.animationCount(); i++) {\n                animationNames.push(this.artboard.animationByIndex(i).name);\n            }\n            return animationNames;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"stateMachineNames\", {\n        /**\n         * Returns a list of state machine names from the current artboard\n         */\n        get: function () {\n            // If the file's not loaded, we got nothing to return\n            if (!this.loaded) {\n                return [];\n            }\n            var stateMachineNames = [];\n            for (var i = 0; i < this.artboard.stateMachineCount(); i++) {\n                stateMachineNames.push(this.artboard.stateMachineByIndex(i).name);\n            }\n            return stateMachineNames;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns the inputs for the specified instanced state machine, or an empty\n     * list if the name is invalid or the state machine is not instanced\n     * @param name the state machine name\n     * @returns the inputs for the named state machine\n     */\n    Rive.prototype.stateMachineInputs = function (name) {\n        // If the file's not loaded, early out, nothing to pause\n        if (!this.loaded) {\n            return;\n        }\n        var stateMachine = this.animator.stateMachines.find(function (m) { return m.name === name; });\n        return stateMachine === null || stateMachine === void 0 ? void 0 : stateMachine.inputs;\n    };\n    Object.defineProperty(Rive.prototype, \"playingStateMachineNames\", {\n        // Returns a list of playing machine names\n        get: function () {\n            // If the file's not loaded, we got nothing to return\n            if (!this.loaded) {\n                return [];\n            }\n            return this.animator.stateMachines\n                .filter(function (m) { return m.playing; })\n                .map(function (m) { return m.name; });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"playingAnimationNames\", {\n        // Returns a list of playing animation names\n        get: function () {\n            // If the file's not loaded, we got nothing to return\n            if (!this.loaded) {\n                return [];\n            }\n            return this.animator.animations.filter(function (a) { return a.playing; }).map(function (a) { return a.name; });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"pausedAnimationNames\", {\n        // Returns a list of paused animation names\n        get: function () {\n            // If the file's not loaded, we got nothing to return\n            if (!this.loaded) {\n                return [];\n            }\n            return this.animator.animations\n                .filter(function (a) { return !a.playing; })\n                .map(function (a) { return a.name; });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"pausedStateMachineNames\", {\n        /**\n         *  Returns a list of paused machine names\n         * @returns a list of state machine names that are paused\n         */\n        get: function () {\n            // If the file's not loaded, we got nothing to return\n            if (!this.loaded) {\n                return [];\n            }\n            return this.animator.stateMachines\n                .filter(function (m) { return !m.playing; })\n                .map(function (m) { return m.name; });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"isPlaying\", {\n        /**\n         * @returns true if any animation is playing\n         */\n        get: function () {\n            return this.animator.isPlaying;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"isPaused\", {\n        /**\n         * @returns true if all instanced animations are paused\n         */\n        get: function () {\n            return this.animator.isPaused;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"isStopped\", {\n        /**\n         * @returns true if no animations are playing or paused\n         */\n        get: function () {\n            return this.animator.isStopped;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rive.prototype, \"bounds\", {\n        /**\n         * @returns the bounds of the current artboard, or undefined if the artboard\n         * isn't loaded yet.\n         */\n        get: function () {\n            return this.artboard ? this.artboard.bounds : undefined;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Subscribe to Rive-generated events\n     * @param type the type of event to subscribe to\n     * @param callback callback to fire when the event occurs\n     */\n    Rive.prototype.on = function (type, callback) {\n        this.eventManager.add({\n            type: type,\n            callback: callback,\n        });\n    };\n    /**\n     * Unsubscribes from a Rive-generated event\n     * @param callback the callback to unsubscribe from\n     */\n    Rive.prototype.unsubscribe = function (type, callback) {\n        this.eventManager.remove({\n            type: type,\n            callback: callback,\n        });\n    };\n    /**\n     * Unsubscribes all listeners from an event type, or everything if no type is\n     * given\n     * @param type the type of event to unsubscribe from, or all types if\n     * undefined\n     */\n    Rive.prototype.unsubscribeAll = function (type) {\n        this.eventManager.removeAll(type);\n    };\n    /**\n     * Stops the rendering loop; this is different from pausing in that it doesn't\n     * change the state of any animation. It stops rendering from occurring. This\n     * is designed for situations such as when Rive isn't visible.\n     *\n     * The only way to start rendering again is to call `startRendering`.\n     * Animations that are marked as playing will start from the position that\n     * they would have been at if rendering had not been stopped.\n     */\n    Rive.prototype.stopRendering = function () {\n        if (this.loaded && this.frameRequestId) {\n            if (this.runtime.cancelAnimationFrame) {\n                this.runtime.cancelAnimationFrame(this.frameRequestId);\n            }\n            else {\n                cancelAnimationFrame(this.frameRequestId);\n            }\n            this.frameRequestId = null;\n        }\n    };\n    /**\n     * Starts the rendering loop if it has been previously stopped. If the\n     * renderer is already active, then this will have zero effect.\n     */\n    Rive.prototype.startRendering = function () {\n        if (this.loaded && this.artboard && !this.frameRequestId) {\n            if (this.runtime.requestAnimationFrame) {\n                this.frameRequestId = this.runtime.requestAnimationFrame(this.draw.bind(this));\n            }\n            else {\n                this.frameRequestId = requestAnimationFrame(this.draw.bind(this));\n            }\n        }\n    };\n    /**\n     * Enables frames-per-second (FPS) reporting for the runtime\n     * If no callback is provided, Rive will append a fixed-position div at the top-right corner of\n     * the page with the FPS reading\n     * @param fpsCallback - Callback from the runtime during the RAF loop that supplies the FPS value\n     */\n    Rive.prototype.enableFPSCounter = function (fpsCallback) {\n        this.runtime.enableFPSCounter(fpsCallback);\n    };\n    /**\n     * Disables frames-per-second (FPS) reporting for the runtime\n     */\n    Rive.prototype.disableFPSCounter = function () {\n        this.runtime.disableFPSCounter();\n    };\n    Object.defineProperty(Rive.prototype, \"contents\", {\n        /**\n         * Returns the contents of a Rive file: the artboards, animations, and state machines\n         */\n        get: function () {\n            if (!this.loaded) {\n                return undefined;\n            }\n            var riveContents = {\n                artboards: [],\n            };\n            for (var i = 0; i < this.file.artboardCount(); i++) {\n                var artboard = this.file.artboardByIndex(i);\n                var artboardContents = {\n                    name: artboard.name,\n                    animations: [],\n                    stateMachines: [],\n                };\n                for (var j = 0; j < artboard.animationCount(); j++) {\n                    var animation = artboard.animationByIndex(j);\n                    artboardContents.animations.push(animation.name);\n                }\n                for (var k = 0; k < artboard.stateMachineCount(); k++) {\n                    var stateMachine = artboard.stateMachineByIndex(k);\n                    var name_1 = stateMachine.name;\n                    var instance = new this.runtime.StateMachineInstance(stateMachine, artboard);\n                    var inputContents = [];\n                    for (var l = 0; l < instance.inputCount(); l++) {\n                        var input = instance.input(l);\n                        inputContents.push({ name: input.name, type: input.type });\n                    }\n                    artboardContents.stateMachines.push({\n                        name: name_1,\n                        inputs: inputContents,\n                    });\n                }\n                riveContents.artboards.push(artboardContents);\n            }\n            return riveContents;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // Error message for missing source or buffer\n    Rive.missingErrorMessage = \"Rive source file or data buffer required\";\n    return Rive;\n}());\n\n// Loads Rive data from a URI via fetch.\nvar loadRiveFile = function (src) { return __awaiter(void 0, void 0, void 0, function () {\n    var req, res, buffer;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                req = new Request(src);\n                return [4 /*yield*/, fetch(req)];\n            case 1:\n                res = _a.sent();\n                return [4 /*yield*/, res.arrayBuffer()];\n            case 2:\n                buffer = _a.sent();\n                return [2 /*return*/, buffer];\n        }\n    });\n}); };\n// #endregion\n// #region utility functions\n/*\n * Utility function to ensure an object is a string array\n */\nvar mapToStringArray = function (obj) {\n    if (typeof obj === \"string\") {\n        return [obj];\n    }\n    else if (obj instanceof Array) {\n        return obj;\n    }\n    // If obj is undefined, return empty array\n    return [];\n};\n// #endregion\n// #region testing utilities\n// Exports to only be used for tests\nvar Testing = {\n    EventManager: EventManager,\n    TaskQueueManager: TaskQueueManager,\n};\n// #endregion\n\n})();\n\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});\n//# sourceMappingURL=rive.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@rive-app/canvas/rive.js\n"));

/***/ }),

/***/ "./node_modules/@rive-app/react-canvas/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@rive-app/react-canvas/dist/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("Object.defineProperty(exports, \"__esModule\", ({value:!0}));var e=__webpack_require__(/*! react */ \"./node_modules/react/index.js\"),n=__webpack_require__(/*! @rive-app/canvas */ \"./node_modules/@rive-app/canvas/rive.js\");function t(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var r=t(e),i=function(){return i=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e},i.apply(this,arguments)};function a(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)n.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(t[r[i]]=e[r[i]])}return t}function o(){var e=\"undefined\"!=typeof window&&\"number\"==typeof window.devicePixelRatio?window.devicePixelRatio:1;return Math.min(Math.max(1,e),3)}var s=function(){function e(){}return e.prototype.observe=function(){},e.prototype.unobserve=function(){},e.prototype.disconnect=function(){},e}();var u=globalThis.ResizeObserver||s,c=void 0!==globalThis.ResizeObserver,f=!c;function d(n,t){void 0===t&&(t=!0);var r=e.useState({width:0,height:0}),i=r[0],a=r[1];e.useEffect(function(){if(\"undefined\"!=typeof window&&t){var e=function(){a({width:window.innerWidth,height:window.innerHeight})};return f&&(e(),window.addEventListener(\"resize\",e)),function(){return window.removeEventListener(\"resize\",e)}}},[]);var o,s,d,l=e.useRef(new u((o=function(e){c&&a({width:e[e.length-1].contentRect.width,height:e[e.length-1].contentRect.height})},s=0,d=0,function(){for(var e=this,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];clearTimeout(d),d=window.setTimeout(function(){return o.apply(e,n)},s)})));return e.useEffect(function(){var e=l.current;if(t){var r=n.current;return n.current&&c&&e.observe(n.current),function(){e.disconnect(),r&&c&&e.unobserve(r)}}e.disconnect()},[n,l]),i}var l={useDevicePixelRatio:!0,fitCanvasToArtboardHeight:!1,useOffscreenRenderer:!0,shouldResizeCanvasToContainer:!0};function v(e){return Object.assign({},l,e)}function h(n){var t=n.riveLoaded,r=void 0!==t&&t,i=n.canvasRef,a=n.containerRef,s=n.options,u=void 0===s?{}:s,c=n.onCanvasHasResized,f=n.artboardBounds,l=v(u),h=e.useState({height:0,width:0}),p=h[0],w=p.height,R=p.width,g=h[1],b=e.useState({height:0,width:0}),y=b[0],m=y.height,C=y.width,O=b[1],x=e.useState(!0),E=x[0],P=x[1],T=l.fitCanvasToArtboardHeight,L=l.shouldResizeCanvasToContainer,z=l.useDevicePixelRatio,j=d(a,L),M=function(){var n=o(),t=e.useState(n),r=t[0],i=t[1];return e.useEffect(function(){if(\"undefined\"!=typeof window&&\"matchMedia\"in window){var e=function(){var e=o();i(e)},n=window.matchMedia(\"screen and (resolution: \".concat(r,\"dppx)\"));return n.hasOwnProperty(\"addEventListener\")?n.addEventListener(\"change\",e):n.addListener(e),function(){n.hasOwnProperty(\"removeEventListener\")?n.removeEventListener(\"change\",e):n.removeListener(e)}}},[r]),r}(),S=null!=f?f:{},H=S.maxX,k=S.maxY,D=e.useCallback(function(){var e,n,t,r,i=null!==(n=null===(e=a.current)||void 0===e?void 0:e.clientWidth)&&void 0!==n?n:0,o=null!==(r=null===(t=a.current)||void 0===t?void 0:t.clientHeight)&&void 0!==r?r:0;return T&&f?{width:i,height:i*(f.maxY/f.maxX)}:{width:i,height:o}},[a,T,H,k]);e.useEffect(function(){if(L&&a.current&&r){var e=D(),n=e.width,t=e.height,o=!1;if(i.current){var s=n!==R||t!==w;if(l.fitCanvasToArtboardHeight&&s&&(a.current.style.height=t+\"px\",o=!0),l.useDevicePixelRatio){if(s||(n*M!==C||t*M!==m)){var u=M*n,f=M*t;i.current.width=u,i.current.height=f,i.current.style.width=n+\"px\",i.current.style.height=t+\"px\",O({width:u,height:f}),o=!0}}else s&&(i.current.width=n,i.current.height=t,O({width:n,height:t}),o=!0);g({width:n,height:t})}c&&(E||o)&&c&&c(),E&&P(!1)}},[i,a,j,M,D,E,P,m,C,w,R,c,L,T,z,r])}function p(e){var n=e.setContainerRef,t=e.setCanvasRef,o=e.className,s=void 0===o?\"\":o,u=e.style,c=e.children,f=a(e,[\"setContainerRef\",\"setCanvasRef\",\"className\",\"style\",\"children\"]),d=i({width:\"100%\",height:\"100%\"},u);return r.default.createElement(\"div\",i({ref:n,className:s},!s&&{style:d}),r.default.createElement(\"canvas\",i({ref:t,style:{verticalAlign:\"top\",width:0,height:0}},f),c))}function w(t,a){void 0===a&&(a={});var o=e.useRef(null),s=e.useRef(null),u=e.useState(null),c=u[0],f=u[1],d=Boolean(t),l=v(a),w=e.useCallback(function(){c&&(c.startRendering(),c.resizeToCanvas())},[c]);h({riveLoaded:!!c,canvasRef:o,containerRef:s,options:l,onCanvasHasResized:w,artboardBounds:null==c?void 0:c.bounds});var R=e.useCallback(function(e){if(e&&t&&d){var r=l.useOffscreenRenderer,a=new n.Rive(i(i({useOffscreenRenderer:r},t),{canvas:e}));a.on(n.EventType.Load,function(){o.current?f(a):a.cleanup()})}else null===e&&o.current&&(o.current.height=0,o.current.width=0);o.current=e},[d]),g=e.useCallback(function(e){s.current=e},[]);e.useEffect(function(){var e=new IntersectionObserver(function(e){e[0].isIntersecting?c&&c.startRendering():c&&c.stopRendering()});return o.current&&e.observe(o.current),function(){e.disconnect()}},[c]),e.useEffect(function(){return function(){c&&(c.cleanup(),f(null))}},[c]);var b=null==t?void 0:t.animations;e.useEffect(function(){c&&b&&(c.isPlaying?(c.stop(c.animationNames),c.play(b)):c.isPaused&&(c.stop(c.animationNames),c.pause(b)))},[b,c]);var y=e.useCallback(function(e){return r.default.createElement(p,i({setContainerRef:g,setCanvasRef:R},e))},[R,g]);return{canvas:o.current,container:s.current,setCanvasRef:R,setContainerRef:g,rive:c,RiveComponent:y}}exports[\"default\"]=function(e){var n=e.src,t=e.artboard,o=e.animations,s=e.stateMachines,u=e.layout,c=e.useOffscreenRenderer,f=void 0===c||c,d=e.shouldDisableRiveListeners,l=void 0!==d&&d,v=e.shouldResizeCanvasToContainer,h=void 0===v||v,p=e.children,R=a(e,[\"src\",\"artboard\",\"animations\",\"stateMachines\",\"layout\",\"useOffscreenRenderer\",\"shouldDisableRiveListeners\",\"shouldResizeCanvasToContainer\",\"children\"]),g=w({src:n,artboard:t,animations:o,layout:u,stateMachines:s,autoplay:!0,shouldDisableRiveListeners:l},{useOffscreenRenderer:f,shouldResizeCanvasToContainer:h}).RiveComponent;return r.default.createElement(g,i({},R),p)},exports.useResizeCanvas=h,exports.useRive=w,exports.useStateMachineInput=function(t,r,i,a){var o=e.useState(null),s=o[0],u=o[1];return e.useEffect(function(){function e(){if(t&&r&&i||u(null),t&&r&&i){var e=t.stateMachineInputs(r);if(e){var n=e.find(function(e){return e.name===i});void 0!==a&&n&&(n.value=a),u(n||null)}}else u(null)}e(),t&&t.on(n.EventType.Play,function(){e()})},[t]),s},Object.keys(n).forEach(function(e){\"default\"===e||exports.hasOwnProperty(e)||Object.defineProperty(exports,e,{enumerable:!0,get:function(){return n[e]}})});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@rive-app/react-canvas/dist/index.js\n"));

/***/ }),

/***/ "./components/layouts/main.js":
/*!************************************!*\
  !*** ./components/layouts/main.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @chakra-ui/react */ \"./node_modules/@chakra-ui/react/dist/index.mjs\");\n/* harmony import */ var _navbar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../navbar */ \"./components/navbar.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/head */ \"./node_modules/next/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _afroboy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../afroboy */ \"./components/afroboy.js\");\n/* harmony import */ var _rive_app_react_canvas__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @rive-app/react-canvas */ \"./node_modules/@rive-app/react-canvas/dist/index.js\");\n/* harmony import */ var _rive_app_react_canvas__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_rive_app_react_canvas__WEBPACK_IMPORTED_MODULE_4__);\n\nvar _s = $RefreshSig$();\n\n\n\n\n\nconst Main = (param)=>{\n    let { children , router  } = param;\n    _s();\n    const smallLogo = (0,_rive_app_react_canvas__WEBPACK_IMPORTED_MODULE_4__.useRive)({\n        src: \"/rive/afroboy.riv\",\n        autoplay: true,\n        animations: \"Leave\"\n    });\n    const bigLogo = (0,_rive_app_react_canvas__WEBPACK_IMPORTED_MODULE_4__.useRive)({\n        src: \"/rive/afroboy.riv\",\n        autoplay: true,\n        stateMachines: \"State\"\n    });\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_5__.Box, {\n        as: \"main\",\n        pb: 8,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_2___default()), {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                        name: \"viewport\",\n                        content: \"width=device-width, initial-scale=1\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\work\\\\portfolio-website\\\\components\\\\layouts\\\\main.js\",\n                        lineNumber: 24,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                        children: \"Adegbemile Bolu - Homepage\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\work\\\\portfolio-website\\\\components\\\\layouts\\\\main.js\",\n                        lineNumber: 25,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\work\\\\portfolio-website\\\\components\\\\layouts\\\\main.js\",\n                lineNumber: 23,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_navbar__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                path: router.asPath,\n                rive: smallLogo\n            }, void 0, false, {\n                fileName: \"C:\\\\work\\\\portfolio-website\\\\components\\\\layouts\\\\main.js\",\n                lineNumber: 28,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_5__.Container, {\n                maxW: \"container.md\",\n                pt: 20,\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_afroboy__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                        rive: bigLogo,\n                        height: {\n                            base: 180,\n                            md: 240\n                        }\n                    }, void 0, false, {\n                        fileName: \"C:\\\\work\\\\portfolio-website\\\\components\\\\layouts\\\\main.js\",\n                        lineNumber: 31,\n                        columnNumber: 9\n                    }, undefined),\n                    children\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\work\\\\portfolio-website\\\\components\\\\layouts\\\\main.js\",\n                lineNumber: 30,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\work\\\\portfolio-website\\\\components\\\\layouts\\\\main.js\",\n        lineNumber: 22,\n        columnNumber: 5\n    }, undefined);\n};\n_s(Main, \"uv1enyID4R4AN9I1SoarpG1pcyo=\", false, function() {\n    return [\n        _rive_app_react_canvas__WEBPACK_IMPORTED_MODULE_4__.useRive,\n        _rive_app_react_canvas__WEBPACK_IMPORTED_MODULE_4__.useRive\n    ];\n});\n_c = Main;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Main);\nvar _c;\n$RefreshReg$(_c, \"Main\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2xheW91dHMvbWFpbi5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBaUQ7QUFDbkI7QUFDRjtBQUNJO0FBQ2dCO0FBR2hELE1BQU1NLE9BQU8sU0FBMEI7UUFBekIsRUFBRUMsU0FBUSxFQUFFQyxPQUFNLEVBQUU7O0lBQ2hDLE1BQU1DLFlBQVlKLCtEQUFPQSxDQUFDO1FBQ3hCSyxLQUFLO1FBQ0xDLFVBQVUsSUFBSTtRQUNkQyxZQUFZO0lBQ2Q7SUFFQSxNQUFNQyxVQUFVUiwrREFBT0EsQ0FBQztRQUN0QkssS0FBSztRQUNMQyxVQUFVLElBQUk7UUFDZEcsZUFBZTtJQUNqQjtJQUVBLHFCQUNFLDhEQUFDZCxpREFBR0E7UUFBQ2UsSUFBRztRQUFPQyxJQUFJOzswQkFDakIsOERBQUNiLGtEQUFJQTs7a0NBQ0gsOERBQUNjO3dCQUFLQyxNQUFLO3dCQUFXQyxTQUFROzs7Ozs7a0NBQzlCLDhEQUFDQztrQ0FBTTs7Ozs7Ozs7Ozs7OzBCQUdULDhEQUFDbEIsK0NBQU1BO2dCQUFDbUIsTUFBTWIsT0FBT2MsTUFBTTtnQkFBRUMsTUFBTWQ7Ozs7OzswQkFFbkMsOERBQUNSLHVEQUFTQTtnQkFBQ3VCLE1BQUs7Z0JBQWVDLElBQUk7O2tDQUNqQyw4REFBQ3JCLGdEQUFPQTt3QkFBQ21CLE1BQU1WO3dCQUFTYSxRQUFROzRCQUFFQyxNQUFNOzRCQUFLQyxJQUFJO3dCQUFJOzs7Ozs7b0JBRXBEckI7Ozs7Ozs7Ozs7Ozs7QUFJVDtHQTdCTUQ7O1FBQ2NELDJEQUFPQTtRQU1UQSwyREFBT0E7OztLQVBuQkM7QUErQk4sK0RBQWVBLElBQUlBLEVBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9sYXlvdXRzL21haW4uanM/ZTVjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3gsIENvbnRhaW5lciB9IGZyb20gJ0BjaGFrcmEtdWkvcmVhY3QnXHJcbmltcG9ydCBOYXZiYXIgZnJvbSAnLi4vbmF2YmFyJ1xyXG5pbXBvcnQgSGVhZCBmcm9tICduZXh0L2hlYWQnXHJcbmltcG9ydCBBZnJvQm95IGZyb20gJy4uL2Fmcm9ib3knXHJcbmltcG9ydCB7IHVzZVJpdmUgfSBmcm9tICdAcml2ZS1hcHAvcmVhY3QtY2FudmFzJ1xyXG5cclxuXHJcbmNvbnN0IE1haW4gPSAoeyBjaGlsZHJlbiwgcm91dGVyIH0pID0+IHtcclxuICBjb25zdCBzbWFsbExvZ28gPSB1c2VSaXZlKHtcclxuICAgIHNyYzogJy9yaXZlL2Fmcm9ib3kucml2JyxcclxuICAgIGF1dG9wbGF5OiB0cnVlLFxyXG4gICAgYW5pbWF0aW9uczogJ0xlYXZlJ1xyXG4gIH0pO1xyXG5cclxuICBjb25zdCBiaWdMb2dvID0gdXNlUml2ZSh7XHJcbiAgICBzcmM6ICcvcml2ZS9hZnJvYm95LnJpdicsXHJcbiAgICBhdXRvcGxheTogdHJ1ZSxcclxuICAgIHN0YXRlTWFjaGluZXM6ICdTdGF0ZScsXHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8Qm94IGFzPVwibWFpblwiIHBiPXs4fT5cclxuICAgICAgPEhlYWQ+XHJcbiAgICAgICAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xXCIgLz5cclxuICAgICAgICA8dGl0bGU+QWRlZ2JlbWlsZSBCb2x1IC0gSG9tZXBhZ2U8L3RpdGxlPlxyXG4gICAgICA8L0hlYWQ+XHJcblxyXG4gICAgICA8TmF2YmFyIHBhdGg9e3JvdXRlci5hc1BhdGh9IHJpdmU9e3NtYWxsTG9nb30gLz5cclxuXHJcbiAgICAgIDxDb250YWluZXIgbWF4Vz1cImNvbnRhaW5lci5tZFwiIHB0PXsyMH0+XHJcbiAgICAgICAgPEFmcm9Cb3kgcml2ZT17YmlnTG9nb30gaGVpZ2h0PXt7IGJhc2U6IDE4MCwgbWQ6IDI0MCB9fSAvPlxyXG5cclxuICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgPC9Cb3g+XHJcbiAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNYWluXHJcbiJdLCJuYW1lcyI6WyJCb3giLCJDb250YWluZXIiLCJOYXZiYXIiLCJIZWFkIiwiQWZyb0JveSIsInVzZVJpdmUiLCJNYWluIiwiY2hpbGRyZW4iLCJyb3V0ZXIiLCJzbWFsbExvZ28iLCJzcmMiLCJhdXRvcGxheSIsImFuaW1hdGlvbnMiLCJiaWdMb2dvIiwic3RhdGVNYWNoaW5lcyIsImFzIiwicGIiLCJtZXRhIiwibmFtZSIsImNvbnRlbnQiLCJ0aXRsZSIsInBhdGgiLCJhc1BhdGgiLCJyaXZlIiwibWF4VyIsInB0IiwiaGVpZ2h0IiwiYmFzZSIsIm1kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/layouts/main.js\n"));

/***/ })

});